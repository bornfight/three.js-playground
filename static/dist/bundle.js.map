{"version":3,"sources":["node_modules/browser-pack/_prelude.js","static/js/components/GLTFModelController.js","static/js/components/GLTFModelControllerEnvironment.js","static/js/components/GLTFModelControllerShader.js","static/js/components/NavigationController.js","static/js/helpers/GridHelper.js","static/js/index.js"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import * as THREE from \"three\";\nimport * as dat from \"dat.gui\";\n\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n\nexport default class GLTFModelController {\n    constructor() {\n        this.DOM = {\n            modelContainer: \".js-model-container\",\n        };\n    }\n\n    init() {\n        this.modelContainer = document.querySelector(this.DOM.modelContainer);\n        if (this.modelContainer !== null) {\n            console.log(\"GLTFModelController init()\");\n\n            this.width = this.modelContainer.offsetWidth;\n            this.height = this.modelContainer.offsetHeight;\n\n            THREE.Cache.enabled = true;\n\n            // gui\n            this.gui = new dat.GUI({\n                name: \"Bottle config\",\n            });\n\n            // gui config\n            this.guiConf = {\n                light: {\n                    lightIntensity: 6,\n                },\n                color: {\n                    color: \"#0005a0\",\n                },\n                autoRotation: {\n                    autoRotate: true,\n                },\n                opacity: {\n                    transparent: true,\n                    opacity: 0.3,\n                },\n                glossy: {\n                    glass: true,\n                    emissiveColor: \"#1e0f0f\",\n                },\n                grid: {\n                    showGrid: false,\n                },\n            };\n\n            this.initFBXModel();\n            this.animate();\n        }\n    }\n\n    initFBXModel() {\n        // camera\n        this.camera = new THREE.PerspectiveCamera(\n            35,\n            this.width / this.height,\n            0.5,\n            400,\n        );\n        this.camera.position.set(35, 10, 32);\n\n        // scene\n        this.scene = new THREE.Scene();\n        this.scene.background = new THREE.Color(0xffffff);\n        // this.scene.background = new THREE.Color(0xa0a0a0);\n        // this.scene.fog = new THREE.Fog(0xa0a0a0, 200, 400);\n\n        // lights\n        const hemiLight = new THREE.HemisphereLight(0xffffff, 0x999999);\n        hemiLight.position.set(0, 200, 0);\n        this.scene.add(hemiLight);\n\n        this.ambientLight = new THREE.AmbientLight(0x404040);\n        this.ambientLight.matrixAutoUpdate = false;\n        this.scene.add(this.ambientLight);\n\n        // this is just back light - without it back side of model would be barely visible\n        this.dirSubLight = new THREE.DirectionalLight(0xcccccc, 1);\n        this.dirSubLight.position.set(-20, 20, -20);\n        this.dirSubLight.matrixAutoUpdate = false;\n        this.scene.add(this.dirSubLight);\n\n        this.dirLight = new THREE.DirectionalLight(0xcccccc, this.guiConf.light.lightIntensity);\n        this.dirLight.position.set(20, 30, 20);\n        this.dirLight.castShadow = true;\n        this.dirLight.shadow.camera.top = 180;\n        this.dirLight.shadow.camera.bottom = -100;\n        this.dirLight.shadow.camera.left = -120;\n        this.dirLight.shadow.camera.right = 120;\n        this.dirLight.shadow.mapSize.width = 4096;\n        this.dirLight.shadow.mapSize.height = 4096;\n        this.dirLight.matrixAutoUpdate = false;\n        this.dirLight.shadow.radius = 4;\n        this.dirLight.shadow.bias = 0.0001;\n        this.scene.add(this.dirLight);\n\n        // add gui for light intensity\n        this.gui\n            .add(this.guiConf.light, \"lightIntensity\", 1, 10, 0.1)\n            .onChange((value) => {\n                this.dirLight.intensity = value;\n            });\n\n        // ground\n        // const mesh = new THREE.Mesh(\n        //     new THREE.PlaneBufferGeometry(1000, 1000, 1, 1),\n        //     new THREE.MeshPhongMaterial({ color: 0xeeeeee, depthWrite: false }),\n        // );\n        // mesh.material.color.convertSRGBToLinear();\n        // mesh.rotation.x = -Math.PI / 2;\n        // mesh.receiveShadow = true;\n        // this.scene.add(mesh);\n\n        // ground grid\n        const grid = new THREE.GridHelper(2000, 40, 0x000000, 0x000000);\n        grid.material.opacity = 0.1;\n        grid.material.transparent = true;\n        this.scene.add(grid);\n        if (!this.guiConf.grid.showGrid) {\n            grid.visible = false;\n        }\n\n        // add gui for grid\n        this.gui\n            .add(this.guiConf.grid, \"showGrid\")\n            .onChange((value) => {\n                grid.visible = !!value;\n            });\n\n        // renderer\n        this.renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            depth: false,\n            powerPreference: \"high-performance\",\n        });\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.setSize(this.width, this.height);\n        this.renderer.shadowMap.enabled = true;\n        this.renderer.gammaFactor = 2.2;\n        this.renderer.outputEncoding = THREE.sRGBEncoding;\n        this.renderer.physicallyCorrectLights = true;\n        this.renderer.shadowMap.type = THREE.PCFShadowMap;\n        this.modelContainer.appendChild(this.renderer.domElement);\n\n        // loader\n        this.loadModel();\n\n        // orbit controls\n        this.controls = new OrbitControls(\n            this.camera,\n            this.renderer.domElement,\n        );\n        this.controls.target.set(0, 10, 0);\n        this.controls.autoRotate = this.guiConf.autoRotation.autoRotate;\n        this.controls.autoRotateSpeed = 1;\n        this.controls.enableZoom = false;\n        this.controls.enablePan = false;\n\n        // this.controls.maxPolarAngle = Math.PI / 2;\n        // this.controls.minPolarAngle = Math.PI / 3;\n\n        this.gui\n            .add(this.guiConf.autoRotation, \"autoRotate\")\n            .onChange((value) => {\n                console.log(value);\n                this.controls.autoRotate = value !== false;\n            });\n\n        // handle resize\n        window.addEventListener(\"resize\", () => this.onWindowResize(), false);\n    }\n\n    loadModel() {\n        // get model\n        let model = this.modelContainer.getAttribute(\"data-model-source\");\n\n        // loader\n        const loader = new GLTFLoader();\n        loader.load(model, (model) => {\n            // dynamically change material\n            let material = new THREE.MeshPhysicalMaterial({\n                color: this.guiConf.color.color,\n                depthFunc: false,\n            });\n\n            material.color.convertSRGBToLinear();\n\n            model.scene.traverse((object) => {\n                if (object.isMesh) {\n                    object.position.y = 0.1;\n                    object.castShadow = true;\n                    object.material.side = 2;\n                    object.material.shadowSide = 1;\n                    object.material.metalness = 0;\n                    object.material.opacity = this.guiConf.opacity.opacity;\n                    object.material.emissive.set(this.guiConf.glossy.emissiveColor);\n                    object.material.depthFunc = false;\n                    object.material.color.convertSRGBToLinear();\n                    object.matrixAutoUpdate = false;\n\n                    // reflection map\n                    const path = `/three.js-playground/static/images/maps/`;\n                    const mapUrls = [\n                        path + \"posx.jpg\",\n                        path + \"negx.jpg\",\n                        path + \"posy.jpg\",\n                        path + \"negy.jpg\",\n                        path + \"posz.jpg\",\n                        path + \"negz.jpg\",\n                    ];\n\n                    const cubeMap = new THREE.CubeTextureLoader().load(mapUrls);\n                    cubeMap.format = THREE.RGBFormat;\n                    cubeMap.encoding = THREE.sRGBEncoding;\n                    object.material.envMap = cubeMap;\n                    object.material.needsUpdate = false;\n\n                    // store material\n                    const initMaterial = object.material;\n\n                    // initial material setup\n                    if (this.guiConf.opacity.transparent === false) {\n                        object.material = material;\n                    } else {\n                        object.material = initMaterial;\n                    }\n\n                    // if initial glass state is true\n                    if (this.guiConf.glossy.glass) {\n                        this.glassOptions(object.material);\n                    }\n\n                    this.gui\n                        .addColor(this.guiConf.color, \"color\")\n                        .onChange((colorValue) => {\n                            object.material.color.set(colorValue);\n                        });\n\n                    this.gui\n                        .add(this.guiConf.opacity, \"transparent\")\n                        .onChange((value) => {\n                            if (value === false) {\n                                object.material = material;\n                            } else {\n                                object.material = initMaterial;\n                            }\n\n                            if (this.guiConf.glossy.glass) {\n                                this.glassOptions(object.material);\n                            }\n                        });\n\n                    this.gui\n                        .add(this.guiConf.opacity, \"opacity\", 0.25, 0.75, 0.01)\n                        .onChange((opacityValue) => {\n                            object.material.opacity = opacityValue;\n                        });\n\n                    this.gui\n                        .addColor(this.guiConf.glossy, \"emissiveColor\")\n                        .onChange((colorValue) => {\n                            object.material.emissive.set(colorValue);\n                        });\n\n                    this.gui\n                        .add(this.guiConf.glossy, \"glass\")\n                        .onChange((value) => {\n                            if (value) {\n                                this.glassOptions(object.material);\n                            } else {\n                                this.matteOptions(object.material);\n                            }\n                        });\n                }\n            });\n\n            this.scene.add(model.scene);\n            this.dirLight.updateMatrix();\n            this.dirSubLight.updateMatrix();\n            this.ambientLight.updateMatrix();\n        });\n    }\n\n    glassOptions(material) {\n        material.refractionRatio = 1;\n        material.reflectivity = 1;\n        material.roughness = 0;\n        material.clearcoat = 1;\n        material.clearcoatRoughness = 0;\n    }\n\n    matteOptions(material) {\n        material.refractionRatio = 0;\n        material.reflectivity = 0;\n        material.roughness = 0.5;\n        material.clearcoat = 0;\n        material.clearcoatRoughness = 0.5;\n    }\n\n    onWindowResize() {\n        this.camera.aspect = this.width / this.height;\n\n        this.renderer.setSize(this.width, this.height);\n    }\n\n    animate() {\n        requestAnimationFrame(() => this.animate());\n        this.renderer.render(this.scene, this.camera);\n        this.controls.update();\n    }\n}\n","import * as THREE from \"three\";\nimport * as dat from \"dat.gui\";\nimport ColorPicker from \"simple-color-picker\";\n\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n\nexport default class GLTFModelControllerEnvironment {\n    constructor() {\n        this.DOM = {\n            modelContainer: \".js-model-container-environment\",\n\n            // filters\n            // color\n            colorWrapper: \".js-color\",\n            colorInput: \".js-color-input\",\n            colorPreview: \".js-color-preview\",\n\n            // opacity\n            opacityWrapper: \".js-opacity\",\n            opacityInput: \".js-opacity-input\",\n            opacityPreview: \".js-opacity-preview\",\n\n            // transparent\n            transparentWrapper: \".js-transparent\",\n\n            // finish\n            finishWrapper: \".js-finish\",\n        };\n    }\n\n    init() {\n        this.modelContainer = document.querySelector(this.DOM.modelContainer);\n        if (this.modelContainer !== null) {\n            console.log(\"GLTFModelController init()\");\n\n            // gui\n            // this.gui = new dat.GUI({\n            //     name: \"Bottle config\",\n            // });\n\n            // gui config\n            this.guiConf = {\n                light: {\n                    lightIntensity: 6,\n                },\n                color: {\n                    color: \"#0005a0\",\n                },\n                autoRotation: {\n                    autoRotate: false,\n                },\n                opacity: {\n                    transparent: false,\n                    opacity: 0.3,\n                },\n                glossy: {\n                    glass: true,\n                },\n                environment: {\n                    showEnvironment: true,\n                    color: \"#0005a0\",\n                },\n            };\n\n            this.colorWrapper = document.querySelector(this.DOM.colorWrapper);\n            this.colorInput = document.querySelector(this.DOM.colorInput);\n            this.colorPreview = document.querySelector(this.DOM.colorPreview);\n\n            this.opacityWrapper = document.querySelector(this.DOM.opacityWrapper);\n            this.opacityInput = document.querySelector(this.DOM.opacityInput);\n            this.opacityPreview = document.querySelector(this.DOM.opacityPreview);\n\n            this.transparentWrapper = document.querySelector(this.DOM.transparentWrapper);\n            this.transparentInputs = this.transparentWrapper.querySelectorAll(\"input\");\n\n            this.transparentInputs.forEach((input) => {\n                if (\n                    this.guiConf.opacity.transparent &&\n                    input.value === \"transparent\"\n                ) {\n                    input.checked = true;\n                } else if (\n                    !this.guiConf.opacity.transparent &&\n                    input.value === \"tinted\"\n                ) {\n                    input.checked = true;\n                }\n            });\n\n            this.finishWrapper = document.querySelector(this.DOM.finishWrapper);\n            this.finishInputs = this.finishWrapper.querySelectorAll(\"input\");\n\n            this.finishInputs.forEach((input) => {\n                if (\n                    this.guiConf.glossy.glass &&\n                    input.value === \"clear\"\n                ) {\n                    input.checked = true;\n                } else if (\n                    !this.guiConf.glossy.glass &&\n                    input.value === \"matte\"\n                ) {\n                    input.checked = true;\n                }\n            });\n\n            this.colorPicker = new ColorPicker();\n            this.colorPicker.appendTo(this.colorInput);\n            this.colorPicker.setColor(this.guiConf.color.color);\n\n            this.width = this.modelContainer.offsetWidth;\n            this.height = this.modelContainer.offsetHeight;\n\n            THREE.Cache.enabled = true;\n\n            this.initFBXModel();\n            this.animate();\n        }\n    }\n\n    initFBXModel() {\n        // camera\n        this.camera = new THREE.PerspectiveCamera(\n            35,\n            this.width / this.height,\n            0.5,\n            600,\n        );\n        this.camera.position.set(10, 10, 40);\n\n        // scene\n        this.scene = new THREE.Scene();\n        this.scene.background = new THREE.Color(0xffffff);\n\n        // lights\n        const hemiLight = new THREE.HemisphereLight(0xffffff, 0x999999);\n        hemiLight.position.set(0, 200, 0);\n        this.scene.add(hemiLight);\n\n        this.ambientLight = new THREE.AmbientLight(0x404040);\n        this.ambientLight.matrixAutoUpdate = false;\n        this.scene.add(this.ambientLight);\n\n        // this is just back light - without it back side of model would be barely visible\n        this.dirSubLight = new THREE.DirectionalLight(0xcccccc, 3);\n        this.dirSubLight.position.set(-20, 20, -20);\n        this.dirSubLight.matrixAutoUpdate = false;\n        this.scene.add(this.dirSubLight);\n\n        this.dirLight = new THREE.DirectionalLight(0xdddddd, this.guiConf.light.lightIntensity);\n        this.dirLight.position.set(20, 30, 10);\n        this.dirLight.castShadow = true;\n        this.dirLight.shadow.camera.top = 180;\n        this.dirLight.shadow.camera.bottom = -100;\n        this.dirLight.shadow.camera.left = -120;\n        this.dirLight.shadow.camera.right = 120;\n        this.dirLight.shadow.mapSize.width = 4096;\n        this.dirLight.shadow.mapSize.height = 4096;\n        this.dirLight.matrixAutoUpdate = false;\n        this.dirLight.shadow.radius = 4;\n        this.dirLight.shadow.bias = 0.0001;\n        this.scene.add(this.dirLight);\n\n        // add gui for light intensity\n        // this.gui\n        //     .add(this.guiConf.light, \"lightIntensity\", 1, 10, 0.1)\n        //     .onChange((value) => {\n        //         this.dirLight.intensity = value;\n        //     });\n\n        // ground\n        this.environment = new THREE.Mesh(\n            new THREE.BoxBufferGeometry(100, 100, 100),\n            new THREE.MeshStandardMaterial({\n                depthWrite: false,\n                refractionRatio: 0,\n                roughness: 1,\n                side: THREE.DoubleSide,\n            }),\n        );\n\n        this.environment.position.y = 50;\n        this.environment.receiveShadow = true;\n        this.environment.material.color.set(this.guiConf.environment.color);\n        this.scene.add(this.environment);\n\n        // add gui for plane\n        if (!this.guiConf.environment.showEnvironment) {\n            this.environment.visible = false;\n        }\n\n        // this.gui\n        //     .add(this.guiConf.environment, \"showEnvironment\")\n        //     .onChange((value) => {\n        //         this.environment.visible = !!value;\n        //     });\n\n        // this.gui\n        //     .addColor(this.guiConf.environment, \"color\")\n        //     .onChange((value) => {\n        //         this.environment.material.color.set(value);\n        //     });\n\n        // renderer\n        this.renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            depth: false,\n            powerPreference: \"high-performance\",\n        });\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.setSize(this.width, this.height);\n        this.renderer.shadowMap.enabled = true;\n        this.renderer.gammaFactor = 2.2;\n        this.renderer.outputEncoding = THREE.sRGBEncoding;\n        this.renderer.physicallyCorrectLights = true;\n        this.renderer.shadowMap.type = THREE.PCFShadowMap;\n        this.modelContainer.appendChild(this.renderer.domElement);\n\n        // loader\n        this.loadModel();\n\n        // orbit controls\n        this.controls = new OrbitControls(\n            this.camera,\n            this.renderer.domElement,\n        );\n        this.controls.target.set(0, 10, 0);\n        this.controls.autoRotate = this.guiConf.autoRotation.autoRotate;\n        this.controls.autoRotateSpeed = 1;\n        this.controls.enableZoom = false;\n        this.controls.enablePan = false;\n\n        this.controls.maxPolarAngle = Math.PI / 1.8;\n        this.controls.minPolarAngle = Math.PI / 3.5;\n\n        // this.gui\n        //     .add(this.guiConf.autoRotation, \"autoRotate\")\n        //     .onChange((value) => {\n        //         console.log(value);\n        //         this.controls.autoRotate = value !== false;\n        //     });\n\n        // handle resize\n        window.addEventListener(\"resize\", () => this.onWindowResize(), false);\n    }\n\n    loadModel() {\n        // get model\n        let model = this.modelContainer.getAttribute(\"data-model-source\");\n\n        // loader\n        const loader = new GLTFLoader();\n        loader.load(model, (model) => {\n            model.scene.traverse((object) => {\n                if (object.isMesh) {\n                    object.position.y = 0.1;\n                    object.castShadow = true;\n                    object.material.side = 2;\n                    object.material.shadowSide = 1;\n                    object.material.metalness = 0;\n                    object.material.opacity = this.guiConf.opacity.opacity;\n                    object.material.depthFunc = false;\n                    object.material.depthWrite = !this.guiConf.opacity.transparent;\n                    object.material.transparent = this.guiConf.opacity.transparent;\n                    object.material.color.set(this.colorPicker.getHexNumber());\n                    object.material.color.convertSRGBToLinear();\n\n                    if (!this.guiConf.opacity.transparent) {\n                        object.material.side = null;\n                        object.material.shadowSide = null;\n                    }\n\n                    object.matrixAutoUpdate = false;\n\n                    // reflection map\n                    const path = `/three.js-playground/static/images/maps/`;\n                    const mapUrls = [\n                        path + \"posx.jpg\",\n                        path + \"negx.jpg\",\n                        path + \"posy.jpg\",\n                        path + \"negy.jpg\",\n                        path + \"posz.jpg\",\n                        path + \"negz.jpg\",\n                    ];\n\n                    const cubeMap = new THREE.CubeTextureLoader().load(mapUrls);\n                    cubeMap.format = THREE.RGBFormat;\n                    cubeMap.encoding = THREE.sRGBEncoding;\n                    object.material.needsUpdate = false;\n\n                    if (this.guiConf.opacity.transparent) {\n                        object.material.envMap = cubeMap;\n                    }\n\n                    // if initial glass state is true\n                    if (this.guiConf.glossy.glass) {\n                        this.glassOptions(object.material);\n                    }\n\n                    // color change\n                    this.colorPicker.onChange(() => {\n                        object.material.color.set(this.colorPicker.getHexNumber());\n                        this.colorPreview.innerHTML = this.colorPicker.getHexString();\n                    });\n\n                    // opacity change\n                    this.opacityInput.value = this.guiConf.opacity.opacity * 100;\n                    this.opacityInput.addEventListener(\"input\", () => {\n                        object.material.opacity = this.opacityInput.value / 100;\n                        this.opacityPreview.innerHTML = `${this.opacityInput.value}%`;\n                    });\n\n                    // transparency change\n                    this.transparentInputs.forEach((input) => {\n                        input.addEventListener(\"change\", () => {\n                            object.material.transparent = input.value === \"transparent\";\n                            object.material.depthWrite = input.value !== \"transparent\";\n\n                            object.material.envMap = input.value !== \"transparent\" ? null : cubeMap;\n                            object.material.side = input.value !== \"transparent\" ? null : 2;\n                            object.material.shadowSide = input.value !== \"transparent\" ? null : 1;\n\n                            object.material.needsUpdate = true;\n                        });\n                    });\n\n                    // finish change\n                    this.finishInputs.forEach((input) => {\n                        input.addEventListener(\"change\", () => {\n                            if (input.value === \"clear\") {\n                                this.glassOptions(object.material);\n                            } else {\n                                this.matteOptions(object.material);\n                            }\n                        });\n                    });\n                }\n            });\n\n            this.scene.add(model.scene);\n            this.dirLight.updateMatrix();\n            this.dirSubLight.updateMatrix();\n            this.ambientLight.updateMatrix();\n        });\n    }\n\n    glassOptions(material) {\n        material.refractionRatio = 1;\n        material.reflectivity = 1;\n        material.roughness = 0;\n        material.clearcoat = 1;\n        material.clearcoatRoughness = 0;\n    }\n\n    matteOptions(material) {\n        material.refractionRatio = 0;\n        material.reflectivity = 0;\n        material.roughness = 0.5;\n        material.clearcoat = 0;\n        material.clearcoatRoughness = 0.5;\n    }\n\n    onWindowResize() {\n        this.camera.aspect = this.width / this.height;\n        this.camera.updateProjectionMatrix();\n\n        this.renderer.setSize(this.width, this.height);\n    }\n\n    animate() {\n        requestAnimationFrame(() => this.animate());\n        this.renderer.render(this.scene, this.camera);\n        this.controls.update();\n    }\n}\n","import * as THREE from \"three\";\nimport * as dat from \"dat.gui\";\n\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n\nexport default class GLTFModelControllerShader {\n    constructor() {\n        this.DOM = {\n            modelContainer: \".js-model-container-shader\",\n        };\n    }\n\n    init() {\n        this.modelContainer = document.querySelector(this.DOM.modelContainer);\n        if (this.modelContainer !== null) {\n            console.log(\"GLTFModelControllerShader init()\");\n\n            THREE.Cache.enabled = true;\n\n            this.gui = new dat.GUI({\n                name: \"Bottle config\",\n            });\n\n            this.guiConf = {\n                autoRotation: {\n                    autoRotate: true,\n                },\n            };\n\n            this.initFBXModel();\n            this.animate();\n        }\n    }\n\n    initFBXModel() {\n        // environment\n        const path =\n            \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/1147877/winter-hdri_\";\n        const format = \".png\";\n        const order = [\"px\", \"nx\", \"py\", \"ny\", \"pz\", \"nz\"];\n        const urls = [];\n        order.forEach(side => {\n            urls.push(`${path}${side}${format}`);\n        });\n        const textureCube = new THREE.CubeTextureLoader().load(urls);\n        textureCube.format = THREE.RGBFormat;\n\n        // camera\n        this.camera = new THREE.PerspectiveCamera(\n            35,\n            window.innerWidth / window.innerHeight,\n            0.5,\n            1000,\n        );\n        this.camera.position.set(48, 20, 32);\n\n        // scene\n        this.scene = new THREE.Scene();\n        this.scene.background = textureCube;\n        this.scene.matrixAutoUpdate = false;\n\n        // shaders config\n        const shader = {\n            uniforms: {\n                mRefractionRatio: { value: 1.02 },\n                mFresnelBias: { value: 0.1 },\n                mFresnelPower: { value: 2.0 },\n                mFresnelScale: { value: 1.0 },\n                tCube: { value: null },\n            },\n            vertexShader: document.querySelector(\"#shader-vertex\").textContent,\n            fragmentShader: document.querySelector(\"#shader-fragment\").textContent,\n        };\n\n        const uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n\n        uniforms[\"tCube\"].value = textureCube;\n\n        // glass material\n        const material = new THREE.ShaderMaterial({\n            uniforms,\n            vertexShader: shader.vertexShader,\n            fragmentShader: shader.fragmentShader,\n        });\n\n        // get model\n        let model = this.modelContainer.getAttribute(\"data-model-source\");\n\n        // loader\n        const loader = new GLTFLoader();\n        loader.load(model, (model) => {\n            model.scene.traverse((object) => {\n                if (object.isMesh) {\n                    object.position.y = 0.1;\n                    object.material = material;\n                }\n            });\n\n            this.scene.add(model.scene);\n        });\n\n        // renderer\n        this.renderer = new THREE.WebGLRenderer({ antialias: true });\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.renderer.shadowMap.enabled = true;\n        this.modelContainer.appendChild(this.renderer.domElement);\n\n        // orbit controls\n        this.controls = new OrbitControls(\n            this.camera,\n            this.renderer.domElement,\n        );\n        this.controls.target.set(0, 10, 0);\n        this.controls.autoRotate = this.guiConf.autoRotation.autoRotate;\n        this.controls.autoRotateSpeed = 1;\n\n        this.gui\n            .add(this.guiConf.autoRotation, \"autoRotate\")\n            .onChange((value) => {\n                this.controls.autoRotate = value !== false;\n            });\n\n        // handle resize\n        window.addEventListener(\"resize\", () => this.onWindowResize(), false);\n    }\n\n    onWindowResize() {\n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    animate() {\n        requestAnimationFrame(() => this.animate());\n        this.renderer.render(this.scene, this.camera);\n        this.controls.update();\n    }\n}\n","/**\n * \"smart\" navigation which goes off screen when scrolling down for a better overview of content and UX\n * navigation appears when scrolling up\n */\nexport default class NavigationController {\n    constructor() {\n        /**\n         * Navigation DOM selectors\n         * Navigation DOM state CSS classes\n         * @type {{navigation: string, states: {navigationSlideUp: string, navigationScrolled: string, navigationFixed: string}}}\n         */\n\n        this.DOM = {\n            navigation: \".js-navigation-wrapper\",\n            states: {\n                navigationScrolled: \"has-scrolled\",\n                navigationFixed: \"is-fixed\",\n                navigationSlideUp: \"slide-up\",\n            },\n        };\n\n        /**\n         * flag, state variable for scrolling event\n         * @type {boolean}\n         */\n        this.scrolling = false;\n        /**\n         * amount of pixels to scroll from top for adding \"has-scrolled\" state class\n         * @type {number}\n         */\n        this.scrollNavigationOffset = 200;\n        /**\n         * variable for storing amount of scroll from top position value\n         * @type {number}\n         */\n        this.previousTop = 0;\n        /**\n         * variable for storing current scroll position value\n         * @type {number}\n         */\n        this.currentTop = 0;\n        this.scrollDelta = 0;\n        this.scrollOffset = 0;\n\n        /**\n         * fetch navigation element DOM element\n         * @type {Element}\n         */\n        this.navigation = document.querySelector(this.DOM.navigation);\n    }\n\n    //region methods\n    /**\n     *\n     */\n    init() {\n        console.log(\"Navigation init()\");\n\n        if (this.navigation !== null) {\n            this.navigationController();\n        } else {\n            console.error(`${this.DOM.navigation} does not exist in the DOM!`);\n        }\n    }\n\n    /**\n     *\n     */\n    navigationController() {\n        document.addEventListener(\"scroll\", () => {\n            if (!this.scrolling) {\n                this.scrolling = true;\n\n                if (!window.requestAnimationFrame) {\n                    setTimeout(this.checkScroll(), 250);\n                } else {\n                    requestAnimationFrame(() => this.checkScroll());\n                }\n            }\n        });\n    }\n\n    /**\n     *\n     */\n    checkScroll() {\n        /**\n         *\n         * @type {number}\n         */\n        let currentTop = window.pageYOffset | document.body.scrollTop;\n\n        this.changeNavigationState(currentTop);\n\n        this.previousTop = currentTop;\n        this.scrolling = false;\n    }\n\n    /**\n     *\n     * @param currentTop\n     */\n    changeNavigationState(currentTop) {\n        if (currentTop > this.scrollNavigationOffset) {\n            this.navigation.classList.add(this.DOM.states.navigationScrolled);\n        } else {\n            this.navigation.classList.remove(\n                this.DOM.states.navigationScrolled,\n            );\n        }\n\n        if (this.previousTop >= currentTop) {\n            this.scrollingUp(currentTop);\n        } else {\n            this.scrollingDown(currentTop);\n        }\n    }\n\n    /**\n     *\n     * @param currentTop\n     */\n    scrollingUp(currentTop) {\n        if (currentTop < this.scrollNavigationOffset) {\n            this.navigation.classList.remove(this.DOM.states.navigationSlideUp);\n        } else if (this.previousTop - currentTop > this.scrollDelta) {\n            this.navigation.classList.remove(this.DOM.states.navigationSlideUp);\n        }\n    }\n\n    /**\n     *\n     * @param currentTop\n     */\n    scrollingDown(currentTop) {\n        if (currentTop > this.scrollNavigationOffset + this.scrollOffset) {\n            this.navigation.classList.add(this.DOM.states.navigationSlideUp);\n        } else if (currentTop > this.scrollNavigationOffset) {\n            this.navigation.classList.remove(this.DOM.states.navigationSlideUp);\n        }\n    }\n\n    //endregion\n}\n","/**\n * Grid helper\n * Show grid overlay when developing\n * Not included in production bundle JS file\n */\nexport default class GridHelper {\n    constructor() {\n        /**\n         * Grid DOM selector\n         * @type {{grid: string}}\n         */\n        this.DOM = {\n            grid: \"grid\",\n        };\n\n        /**\n         * Grid options\n         * @type {{gutterFixed: boolean, initialDisplay: string, gridFixed: boolean, gutterWidth: number, gridColor: string, columnCount: number, gridWidth: number, columnBgColor: string}}\n         */\n        this.gridOptions = {\n            initialDisplay: \"none\", // \"flex\" or \"none\"\n            columnCount: 24,\n            gridWidth: 1440, // px\n            gridFixed: true,\n            gutterWidth: 0, // px\n            gutterFixed: false,\n            gridColor: \"rgb(255, 0, 255, 0.15)\",\n            columnBgColor: \"rgb(255, 0, 255, 0.025)\",\n        };\n\n        const consoleLogStyle = [\n            \"background-color: #a6a6a6\",\n            \"color: black\",\n            \"display: block\",\n            \"line-height: 24px\",\n            \"text-align: center\",\n            \"border: 1px solid #ffffff\",\n            \"font-weight: bold\",\n        ].join(\";\");\n\n        console.info(\"toggle grid: %c Alt/Option + G \", consoleLogStyle);\n\n        this.grid = null;\n\n        this.columnWidth =\n            (this.gridOptions.gridWidth -\n                (this.gridOptions.columnCount - 1) *\n                    this.gridOptions.gutterWidth) /\n            this.gridOptions.columnCount;\n\n        this.columnWidthPercentage = `${\n            (this.columnWidth / this.gridOptions.gridWidth) * 100\n        }%`;\n\n        this.gutterWidthPercentage = `${\n            (this.gridOptions.gutterWidth / this.gridOptions.gridWidth) * 100\n        }%`;\n    }\n\n    init() {\n        console.log(\"GridHelper init()\");\n        this.initGrid();\n        this.keyboardShortcut();\n    }\n\n    initGrid() {\n        // create grid overlay element\n        this.grid = document.createElement(\"div\");\n        this.grid.id = this.DOM.grid;\n\n        // style grid element\n        this.grid.style.cssText = `\n            pointer-events: none;\n            display: ${this.gridOptions.initialDisplay};\n            flex-direction: row;\n            width: 100%;\n            height: 100%;\n            position: absolute;\n            top: 0;\n            left: 50%;\n            transform: translateX(-50%);\n            z-index: 999;\n        `;\n\n        if (this.gridOptions.gridFixed === true) {\n            this.grid.style.maxWidth = `${this.gridOptions.gridWidth}px`;\n        }\n\n        if (!this.gridOptions.gutterWidth > 0) {\n            this.grid.style.borderLeft = \"none\";\n        }\n\n        // add grid container to page\n        document.body.appendChild(this.grid);\n\n        // add columns to grid\n        for (var i = 0; i < this.gridOptions.columnCount; i++) {\n            var column = document.createElement(\"i\");\n            this.grid.appendChild(column);\n\n            column.style.cssText = `\n                height: auto;\n                flex-grow: 1;\n                background-color: ${this.gridOptions.columnBgColor};\n                border-left: 1px solid ${this.gridOptions.gridColor};\n            `;\n\n            if (this.gridOptions.gutterWidth > 0) {\n                column.style.borderRight = `1px solid ${this.gridOptions.gridColor}`;\n            } else {\n                this.grid.style.borderRight = `1px solid ${this.gridOptions.gridColor}`;\n            }\n\n            if (this.gridOptions.gutterFixed === true) {\n                column.style.marginRight = `${this.gridOptions.gutterWidth}px`;\n            } else {\n                column.style.marginRight = this.gutterWidthPercentage;\n                column.style.width = this.columnWidthPercentage;\n            }\n        }\n\n        this.grid.lastChild.style.marginRight = 0;\n    }\n\n    keyboardShortcut() {\n        document.addEventListener(\"keyup\", (ev) => {\n            if (ev.keyCode === 71 && ev.altKey) {\n                if (this.grid.style.display === \"none\") {\n                    this.grid.style.display = \"flex\";\n                } else {\n                    this.grid.style.display = \"none\";\n                }\n            }\n        });\n    }\n}\n","/**\n * MAIN JS FILE\n */\n\n/**\n * Helpers\n * Imports of helper functions are stripped out of bundle\n * Include them within \"start-strip-code\" and \"end-strip-code\" comments\n */\n/* start-strip-code */\nimport GridHelper from \"./helpers/GridHelper\";\n/* end-strip-code */\n/**\n * Components\n */\nimport NavigationController from \"./components/NavigationController\";\nimport GLTFModelController from \"./components/GLTFModelController\";\nimport GLTFModelControllerShader from \"./components/GLTFModelControllerShader\";\nimport GLTFModelControllerEnvironment from \"./components/GLTFModelControllerEnvironment\";\n\n/**\n * Check if document is ready cross-browser\n * @param callback\n */\nconst ready = (callback) => {\n    if (document.readyState !== \"loading\") {\n        /**\n         * Document is already ready, call the callback directly\n         */\n        callback();\n    } else if (document.addEventListener) {\n        /**\n         * All modern browsers to register DOMContentLoaded\n         */\n        document.addEventListener(\"DOMContentLoaded\", callback);\n    } else {\n        /**\n         * Old IE browsers\n         */\n        document.attachEvent(\"onreadystatechange\", function () {\n            if (document.readyState === \"complete\") {\n                callback();\n            }\n        });\n    }\n};\n\n/**\n * Document ready callback\n */\nready(() => {\n    /**\n     * HELPERS INIT\n     * Only init helpers if they exist\n     * Will be undefined on production because of import stripping\n     */\n    if (typeof GridHelper == \"function\") {\n        const grid = new GridHelper();\n        grid.init();\n    }\n\n    /**\n     * CREDITS INIT\n     */\n    const credits = [\n        \"background-color: #000000\",\n        \"color: white\",\n        \"display: block\",\n        \"line-height: 24px\",\n        \"text-align: center\",\n        \"border: 1px solid #ffffff\",\n        \"font-weight: bold\",\n    ].join(\";\");\n    console.info(\"dev by: %c Bornfight \", credits);\n\n    /**\n     * COMPONENTS INIT\n     */\n\n    /**\n     * Navigation\n     * @type {NavigationController}\n     */\n    const navigation = new NavigationController();\n    navigation.init();\n\n    const gltfModelController = new GLTFModelController();\n    gltfModelController.init();\n\n    const gLTFModelControllerShader = new GLTFModelControllerShader();\n    gLTFModelControllerShader.init();\n\n    const gLTFModelControllerEnvironment = new GLTFModelControllerEnvironment();\n    gLTFModelControllerEnvironment.init();\n});\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}