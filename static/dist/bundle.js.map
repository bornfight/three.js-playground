{"version":3,"sources":["node_modules/browser-pack/_prelude.js","static/js/components/GLTFModelController.js","static/js/components/GLTFModelControllerEnvironment.js","static/js/components/GLTFModelControllerShader.js","static/js/components/NavigationController.js","static/js/components/SofaModelController.js","static/js/helpers/GridHelper.js","static/js/index.js"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import * as THREE from \"three\";\nimport * as dat from \"dat.gui\";\n\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n\nexport default class GLTFModelController {\n    constructor() {\n        this.DOM = {\n            modelContainer: \".js-model-container\",\n        };\n    }\n\n    init() {\n        this.modelContainer = document.querySelector(this.DOM.modelContainer);\n        if (this.modelContainer !== null) {\n            console.log(\"GLTFModelController init()\");\n\n            this.width = this.modelContainer.offsetWidth;\n            this.height = this.modelContainer.offsetHeight;\n\n            THREE.Cache.enabled = true;\n\n            // gui\n            this.gui = new dat.GUI({\n                name: \"Bottle config\",\n            });\n\n            // gui config\n            this.guiConf = {\n                light: {\n                    lightIntensity: 6,\n                },\n                color: {\n                    color: \"#0005a0\",\n                },\n                autoRotation: {\n                    autoRotate: true,\n                },\n                opacity: {\n                    transparent: true,\n                    opacity: 0.3,\n                },\n                glossy: {\n                    glass: true,\n                    emissiveColor: \"#1e0f0f\",\n                },\n                grid: {\n                    showGrid: false,\n                },\n            };\n\n            this.initFBXModel();\n            this.animate();\n        }\n    }\n\n    initFBXModel() {\n        // camera\n        this.camera = new THREE.PerspectiveCamera(\n            35,\n            this.width / this.height,\n            0.5,\n            400,\n        );\n        this.camera.position.set(35, 10, 32);\n\n        // scene\n        this.scene = new THREE.Scene();\n        this.scene.background = new THREE.Color(0xffffff);\n        // this.scene.background = new THREE.Color(0xa0a0a0);\n        // this.scene.fog = new THREE.Fog(0xa0a0a0, 200, 400);\n\n        // lights\n        const hemiLight = new THREE.HemisphereLight(0xffffff, 0x999999);\n        hemiLight.position.set(0, 200, 0);\n        this.scene.add(hemiLight);\n\n        this.ambientLight = new THREE.AmbientLight(0x404040);\n        this.ambientLight.matrixAutoUpdate = false;\n        this.scene.add(this.ambientLight);\n\n        // this is just back light - without it back side of model would be barely visible\n        this.dirSubLight = new THREE.DirectionalLight(0xcccccc, 1);\n        this.dirSubLight.position.set(-20, 20, -20);\n        this.dirSubLight.matrixAutoUpdate = false;\n        this.scene.add(this.dirSubLight);\n\n        this.dirLight = new THREE.DirectionalLight(0xcccccc, this.guiConf.light.lightIntensity);\n        this.dirLight.position.set(20, 30, 20);\n        this.dirLight.castShadow = true;\n        this.dirLight.shadow.camera.top = 180;\n        this.dirLight.shadow.camera.bottom = -100;\n        this.dirLight.shadow.camera.left = -120;\n        this.dirLight.shadow.camera.right = 120;\n        this.dirLight.shadow.mapSize.width = 4096;\n        this.dirLight.shadow.mapSize.height = 4096;\n        this.dirLight.matrixAutoUpdate = false;\n        this.dirLight.shadow.radius = 4;\n        this.dirLight.shadow.bias = 0.0001;\n        this.scene.add(this.dirLight);\n\n        // add gui for light intensity\n        this.gui\n            .add(this.guiConf.light, \"lightIntensity\", 1, 10, 0.1)\n            .onChange((value) => {\n                this.dirLight.intensity = value;\n            });\n\n        // ground\n        // const mesh = new THREE.Mesh(\n        //     new THREE.PlaneBufferGeometry(1000, 1000, 1, 1),\n        //     new THREE.MeshPhongMaterial({ color: 0xeeeeee, depthWrite: false }),\n        // );\n        // mesh.material.color.convertSRGBToLinear();\n        // mesh.rotation.x = -Math.PI / 2;\n        // mesh.receiveShadow = true;\n        // this.scene.add(mesh);\n\n        // ground grid\n        const grid = new THREE.GridHelper(2000, 40, 0x000000, 0x000000);\n        grid.material.opacity = 0.1;\n        grid.material.transparent = true;\n        this.scene.add(grid);\n        if (!this.guiConf.grid.showGrid) {\n            grid.visible = false;\n        }\n\n        // add gui for grid\n        this.gui\n            .add(this.guiConf.grid, \"showGrid\")\n            .onChange((value) => {\n                grid.visible = !!value;\n            });\n\n        // renderer\n        this.renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            depth: false,\n            powerPreference: \"high-performance\",\n        });\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.setSize(this.width, this.height);\n        this.renderer.shadowMap.enabled = true;\n        this.renderer.gammaFactor = 2.2;\n        this.renderer.outputEncoding = THREE.sRGBEncoding;\n        this.renderer.physicallyCorrectLights = true;\n        this.renderer.shadowMap.type = THREE.PCFShadowMap;\n        this.modelContainer.appendChild(this.renderer.domElement);\n\n        // loader\n        this.loadModel();\n\n        // orbit controls\n        this.controls = new OrbitControls(\n            this.camera,\n            this.renderer.domElement,\n        );\n        this.controls.target.set(0, 10, 0);\n        this.controls.autoRotate = this.guiConf.autoRotation.autoRotate;\n        this.controls.autoRotateSpeed = 1;\n        this.controls.enableZoom = false;\n        this.controls.enablePan = false;\n\n        // this.controls.maxPolarAngle = Math.PI / 2;\n        // this.controls.minPolarAngle = Math.PI / 3;\n\n        this.gui\n            .add(this.guiConf.autoRotation, \"autoRotate\")\n            .onChange((value) => {\n                console.log(value);\n                this.controls.autoRotate = value !== false;\n            });\n\n        // handle resize\n        window.addEventListener(\"resize\", () => this.onWindowResize(), false);\n    }\n\n    loadModel() {\n        // get model\n        let model = this.modelContainer.getAttribute(\"data-model-source\");\n\n        // loader\n        const loader = new GLTFLoader();\n        loader.load(model, (model) => {\n            // dynamically change material\n            let material = new THREE.MeshPhysicalMaterial({\n                color: this.guiConf.color.color,\n                depthFunc: false,\n            });\n\n            material.color.convertSRGBToLinear();\n\n            model.scene.traverse((object) => {\n                if (object.isMesh) {\n                    object.position.y = 0.1;\n                    object.castShadow = true;\n                    object.material.side = 2;\n                    object.material.shadowSide = 1;\n                    object.material.metalness = 0;\n                    object.material.opacity = this.guiConf.opacity.opacity;\n                    object.material.emissive.set(this.guiConf.glossy.emissiveColor);\n                    object.material.depthFunc = false;\n                    object.material.color.convertSRGBToLinear();\n                    object.matrixAutoUpdate = false;\n\n                    // reflection map\n                    const path = `/three.js-playground/static/images/maps/`;\n                    const mapUrls = [\n                        path + \"posx.jpg\",\n                        path + \"negx.jpg\",\n                        path + \"posy.jpg\",\n                        path + \"negy.jpg\",\n                        path + \"posz.jpg\",\n                        path + \"negz.jpg\",\n                    ];\n\n                    const cubeMap = new THREE.CubeTextureLoader().load(mapUrls);\n                    cubeMap.format = THREE.RGBFormat;\n                    cubeMap.encoding = THREE.sRGBEncoding;\n                    object.material.envMap = cubeMap;\n                    object.material.needsUpdate = false;\n\n                    // store material\n                    const initMaterial = object.material;\n\n                    // initial material setup\n                    if (this.guiConf.opacity.transparent === false) {\n                        object.material = material;\n                    } else {\n                        object.material = initMaterial;\n                    }\n\n                    // if initial glass state is true\n                    if (this.guiConf.glossy.glass) {\n                        this.glassOptions(object.material);\n                    }\n\n                    this.gui\n                        .addColor(this.guiConf.color, \"color\")\n                        .onChange((colorValue) => {\n                            object.material.color.set(colorValue);\n                        });\n\n                    this.gui\n                        .add(this.guiConf.opacity, \"transparent\")\n                        .onChange((value) => {\n                            if (value === false) {\n                                object.material = material;\n                            } else {\n                                object.material = initMaterial;\n                            }\n\n                            if (this.guiConf.glossy.glass) {\n                                this.glassOptions(object.material);\n                            }\n                        });\n\n                    this.gui\n                        .add(this.guiConf.opacity, \"opacity\", 0.25, 0.75, 0.01)\n                        .onChange((opacityValue) => {\n                            object.material.opacity = opacityValue;\n                        });\n\n                    this.gui\n                        .addColor(this.guiConf.glossy, \"emissiveColor\")\n                        .onChange((colorValue) => {\n                            object.material.emissive.set(colorValue);\n                        });\n\n                    this.gui\n                        .add(this.guiConf.glossy, \"glass\")\n                        .onChange((value) => {\n                            if (value) {\n                                this.glassOptions(object.material);\n                            } else {\n                                this.matteOptions(object.material);\n                            }\n                        });\n                }\n            });\n\n            this.scene.add(model.scene);\n            this.dirLight.updateMatrix();\n            this.dirSubLight.updateMatrix();\n            this.ambientLight.updateMatrix();\n        });\n    }\n\n    glassOptions(material) {\n        material.refractionRatio = 1;\n        material.reflectivity = 1;\n        material.roughness = 0;\n        material.clearcoat = 1;\n        material.clearcoatRoughness = 0;\n    }\n\n    matteOptions(material) {\n        material.refractionRatio = 0;\n        material.reflectivity = 0;\n        material.roughness = 0.5;\n        material.clearcoat = 0;\n        material.clearcoatRoughness = 0.5;\n    }\n\n    onWindowResize() {\n        this.camera.aspect = this.width / this.height;\n\n        this.renderer.setSize(this.width, this.height);\n    }\n\n    animate() {\n        requestAnimationFrame(() => this.animate());\n        this.renderer.render(this.scene, this.camera);\n        this.controls.update();\n    }\n}\n","import * as THREE from \"three\";\nimport ColorPicker from \"simple-color-picker\";\nimport gsap from \"gsap\";\n\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n\nexport default class GLTFModelControllerEnvironment {\n    constructor() {\n        this.DOM = {\n            modelContainer: \".js-model-container-environment\",\n            download: \".js-download-image\",\n\n            // filters\n            // color\n            colorWrapper: \".js-color\",\n            colorInput: \".js-color-input\",\n            colorPreview: \".js-color-preview\",\n\n            // opacity\n            opacityWrapper: \".js-opacity\",\n            opacityInput: \".js-opacity-input\",\n            opacityPreview: \".js-opacity-preview\",\n\n            // transparent\n            transparentWrapper: \".js-transparent\",\n\n            // finish\n            finishWrapper: \".js-finish\",\n        };\n\n        // config\n        this.config = {\n            light: {\n                lightIntensity: 6,\n            },\n            color: {\n                color: \"#0005a0\",\n            },\n            autoRotation: {\n                autoRotate: true,\n            },\n            opacity: {\n                transparent: false,\n                opacity: 0.3,\n            },\n            finish: {\n                clear: true,\n            },\n            environment: {\n                showEnvironment: true,\n                color: \"#0005a0\",\n            },\n        };\n    }\n\n    /**\n     * main init - all dom elements and method calls\n     */\n    init() {\n        this.modelContainer = document.querySelector(this.DOM.modelContainer);\n        if (this.modelContainer !== null) {\n            console.log(\"GLTFModelController init()\");\n\n            THREE.Cache.enabled = true;\n\n            this.colorWrapper = document.querySelector(this.DOM.colorWrapper);\n            this.colorInput = this.colorWrapper.querySelector(this.DOM.colorInput);\n            this.colorPreview = this.colorWrapper.querySelector(this.DOM.colorPreview);\n\n            this.opacityWrapper = document.querySelector(this.DOM.opacityWrapper);\n            this.opacityInput = this.opacityWrapper.querySelector(this.DOM.opacityInput);\n            this.opacityPreview = this.opacityWrapper.querySelector(this.DOM.opacityPreview);\n\n            this.transparentWrapper = document.querySelector(this.DOM.transparentWrapper);\n            this.transparentInputs = this.transparentWrapper.querySelectorAll(\"input\");\n\n            // preset transparency radio btns\n            this.transparentInputs.forEach((input) => {\n                if (this.config.opacity.transparent && input.value === \"transparent\") {\n                    input.checked = true;\n                    this.opacityWrapper.style.display = \"\";\n                } else if (!this.config.opacity.transparent && input.value === \"tinted\") {\n                    input.checked = true;\n                    this.opacityWrapper.style.display = \"none\";\n                }\n            });\n\n            this.finishWrapper = document.querySelector(this.DOM.finishWrapper);\n            this.finishInputs = this.finishWrapper.querySelectorAll(\"input\");\n\n            // preset finish radio btns\n            this.finishInputs.forEach((input) => {\n                if (this.config.finish.clear && input.value === \"clear\") {\n                    input.checked = true;\n                } else if (!this.config.finish.clear && input.value === \"matte\") {\n                    input.checked = true;\n                }\n            });\n\n            this.colorPicker = new ColorPicker();\n            this.colorPicker.appendTo(this.colorInput);\n\n            // preset color picker\n            this.colorPicker.setColor(this.config.color.color);\n\n            this.width = this.modelContainer.offsetWidth;\n            this.height = this.modelContainer.offsetHeight;\n\n            this.isPlaying = false;\n\n            // reflection map\n            const path = `/three.js-playground/static/images/maps/`;\n            const mapUrls = [\n                path + \"posx.jpg\",\n                path + \"negx.jpg\",\n                path + \"posy.jpg\",\n                path + \"negy.jpg\",\n                path + \"posz.jpg\",\n                path + \"negz.jpg\",\n            ];\n\n            this.cubeMap = new THREE.CubeTextureLoader().load(mapUrls);\n            this.cubeMap.format = THREE.RGBFormat;\n            this.cubeMap.encoding = THREE.sRGBEncoding;\n\n            this.initCamera();\n            this.initScene();\n            this.initLights();\n            this.initEnvironment();\n            this.initRenderer();\n            this.initControls();\n            this.initModel();\n\n            // this will remove model and stop animation and after 3s will create new model\n            // setTimeout(() => {\n            //     this.clearModel();\n            // }, 3000);\n\n            // handle resize\n            window.addEventListener(\"resize\", () => this.onWindowResize(), false);\n\n            this.downloadAnchor = document.querySelector(this.DOM.download);\n            this.downloadAnchor.addEventListener(\"click\", (ev) => {\n                ev.preventDefault();\n                this.saveImage(ev.currentTarget);\n            });\n        }\n    }\n\n    /**\n     * camera setup\n     */\n    initCamera() {\n        this.camera = new THREE.PerspectiveCamera(\n            35,\n            this.width / this.height,\n            0.5,\n            600,\n        );\n        this.camera.position.set(10, 10, 40);\n    }\n\n    /**\n     * scene setup\n     */\n    initScene() {\n        this.scene = new THREE.Scene();\n        this.scene.background = new THREE.Color(0xffffff);\n    }\n\n    /**\n     * lights setup - because of performance > all in one object\n     */\n    initLights() {\n        const lightWrapper = new THREE.Object3D();\n        const hemiLight = new THREE.HemisphereLight(0xffffff, 0x999999);\n        hemiLight.position.set(0, 200, 0);\n        lightWrapper.add(hemiLight);\n\n        this.ambientLight = new THREE.AmbientLight(0x404040);\n        this.ambientLight.matrixAutoUpdate = false;\n        lightWrapper.add(this.ambientLight);\n\n        // this is just back light - without it back side of model would be barely visible\n        this.dirSubLight = new THREE.DirectionalLight(0xcccccc, 3);\n        this.dirSubLight.position.set(-20, 20, -20);\n        this.dirSubLight.matrixAutoUpdate = false;\n        lightWrapper.add(this.dirSubLight);\n\n        this.dirLight = new THREE.DirectionalLight(0xdddddd, this.config.light.lightIntensity);\n        this.dirLight.position.set(20, 30, 10);\n        this.dirLight.castShadow = true;\n        this.dirLight.shadow.camera.top = 180;\n        this.dirLight.shadow.camera.bottom = -100;\n        this.dirLight.shadow.camera.left = -120;\n        this.dirLight.shadow.camera.right = 120;\n        this.dirLight.shadow.mapSize.width = 4096;\n        this.dirLight.shadow.mapSize.height = 4096;\n        this.dirLight.matrixAutoUpdate = false;\n        this.dirLight.shadow.radius = 4;\n        this.dirLight.shadow.bias = 0.0001;\n        lightWrapper.add(this.dirLight);\n        this.scene.add(lightWrapper);\n    }\n\n    /**\n     * environment setup - box geometry\n     */\n    initEnvironment() {\n        this.environment = new THREE.Mesh(\n            new THREE.BoxBufferGeometry(100, 100, 100),\n            new THREE.MeshStandardMaterial({\n                depthWrite: false,\n                refractionRatio: 0,\n                roughness: 1,\n                side: THREE.BackSide,\n            }),\n        );\n\n        this.environment.position.y = 50;\n        this.environment.receiveShadow = true;\n        this.environment.material.color.set(this.config.environment.color);\n        this.scene.add(this.environment);\n\n        if (!this.config.environment.showEnvironment) {\n            this.environment.visible = false;\n        }\n    }\n\n    /**\n     * renderer setup\n     */\n    initRenderer() {\n        this.renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            depth: false,\n            powerPreference: \"high-performance\",\n            preserveDrawingBuffer: true,\n        });\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.setSize(this.width, this.height);\n        this.renderer.shadowMap.enabled = true;\n        // this.renderer.gammaFactor = 2.2;\n        this.renderer.outputEncoding = THREE.sRGBEncoding;\n        this.renderer.physicallyCorrectLights = true;\n        this.renderer.shadowMap.type = THREE.PCFShadowMap;\n        this.modelContainer.appendChild(this.renderer.domElement);\n    }\n\n    /**\n     * orbit controls setup\n     */\n    initControls() {\n        this.controls = new OrbitControls(\n            this.camera,\n            this.renderer.domElement,\n        );\n        this.controls.target.set(0, 10, 0);\n        this.controls.autoRotate = this.config.autoRotation.autoRotate;\n        this.controls.autoRotateSpeed = 1;\n        this.controls.enableZoom = false;\n        this.controls.enablePan = false;\n        this.controls.enableDamping = true;\n        this.controls.dampingFactor = 0.1;\n\n        this.controls.maxPolarAngle = Math.PI / 1.8;\n        this.controls.minPolarAngle = Math.PI / 3.5;\n    }\n\n    /**\n     * model setup and load call\n     */\n    initModel() {\n        this.isPlaying = true;\n        this.animate();\n\n        // get model\n        let model = this.modelContainer.getAttribute(\"data-model-source\");\n\n        // loader\n        const loader = new GLTFLoader();\n        this.model = null;\n        loader.load(model, (model) => {\n            model.scene.traverse((object) => {\n                this.loadModel(object);\n            });\n            this.model = model.scene;\n\n            model.scene.name = \"3d-model\";\n\n            this.scene.add(model.scene);\n            this.dirLight.updateMatrix();\n            this.dirSubLight.updateMatrix();\n            this.ambientLight.updateMatrix();\n        });\n    }\n\n    /**\n     * moadel loading and controller call\n     * @param [object] object\n     */\n    loadModel(object) {\n        if (object.isMesh) {\n            object.position.y = 0.1;\n            object.castShadow = true;\n            object.material.side = 2;\n            object.material.shadowSide = 1;\n            object.material.metalness = 0;\n            object.material.opacity = this.config.opacity.opacity;\n            object.material.depthFunc = false;\n            object.material.depthWrite = !this.config.opacity.transparent;\n            object.material.transparent = this.config.opacity.transparent;\n            object.material.color.set(this.colorPicker.getHexNumber());\n            object.material.color.convertSRGBToLinear();\n\n            if (!this.config.opacity.transparent) {\n                object.material.side = null;\n                object.material.shadowSide = null;\n            }\n\n            object.matrixAutoUpdate = false;\n            object.material.needsUpdate = false;\n\n            if (this.config.opacity.transparent) {\n                object.material.envMap = this.cubeMap;\n            }\n\n            // if initial glass state is true\n            if (this.config.finish.clear) {\n                this.clearOptions(object.material);\n            }\n\n            this.filtersController(object);\n\n            this.revealAnimation(object);\n        }\n    }\n\n    revealAnimation(object) {\n        object.scale.set(0.001, 0.001, 0.001);\n        object.rotation.y = -4.5;\n        object.updateMatrix();\n\n        setTimeout(() => {\n            gsap.to(object.rotation, {\n                duration: 1,\n                ease: \"power3.out\",\n                y: 0,\n            });\n\n            gsap.to(object.scale, {\n                duration: 1,\n                ease: \"elastic.out(1, 0.5)\",\n                x: 1,\n                y: 1,\n                z: 1,\n                onUpdate: () => {\n                    object.updateMatrix();\n                },\n            });\n        }, 600);\n    }\n\n    /**\n     * filters controller\n     * @param [object] object\n     */\n    filtersController(object) {\n        // color change\n        this.colorPicker.onChange(() => {\n            object.material.color.set(this.colorPicker.getHexNumber());\n            this.colorPreview.innerHTML = this.colorPicker.getHexString();\n        });\n\n        // opacity change\n        this.opacityInput.value = this.config.opacity.opacity * 100;\n        this.opacityInput.addEventListener(\"input\", () => {\n            object.material.opacity = this.opacityInput.value / 100;\n            this.opacityPreview.innerHTML = `${this.opacityInput.value}%`;\n        });\n\n        // transparency change\n        this.transparentInputs.forEach((input) => {\n            input.addEventListener(\"change\", () => {\n                object.material.transparent = input.value === \"transparent\";\n                object.material.depthWrite = input.value !== \"transparent\";\n                this.opacityWrapper.style.display = input.value === \"transparent\" ? \"\" : \"none\";\n\n                object.material.envMap = input.value !== \"transparent\" ? null : this.cubeMap;\n                object.material.side = input.value !== \"transparent\" ? null : 2;\n                object.material.shadowSide = input.value !== \"transparent\" ? null : 1;\n\n                object.material.needsUpdate = true;\n            });\n        });\n\n        // finish change\n        this.finishInputs.forEach((input) => {\n            input.addEventListener(\"change\", () => {\n                if (input.value === \"clear\") {\n                    this.clearOptions(object.material);\n                } else {\n                    this.matteOptions(object.material);\n                }\n            });\n        });\n    }\n\n    /**\n     * finish clear method\n     * @param material\n     */\n    clearOptions(material) {\n        material.refractionRatio = 1;\n        material.reflectivity = 1;\n        material.roughness = 0;\n        material.clearcoat = 1;\n        material.clearcoatRoughness = 0;\n    }\n\n    /**\n     * finish matte method\n     * @param material\n     */\n    matteOptions(material) {\n        material.refractionRatio = 0;\n        material.reflectivity = 0;\n        material.roughness = 0.5;\n        material.clearcoat = 0;\n        material.clearcoatRoughness = 0.5;\n    }\n\n    /**\n     *\n     */\n    onWindowResize() {\n        this.camera.aspect = this.modelContainer.offsetWidth / this.modelContainer.offsetHeight;\n        this.camera.updateProjectionMatrix();\n\n        this.renderer.setSize(this.modelContainer.offsetWidth, this.modelContainer.offsetHeight);\n    }\n\n    /**\n     * requestAnimationFrame\n     */\n    animate() {\n        this.renderer.render(this.scene, this.camera);\n        this.controls.update();\n        if (this.renderer != null && this.isPlaying) {\n            requestAnimationFrame(() => this.animate());\n        }\n    }\n\n    /**\n     * will remove model from scene and clear all props\n     */\n    clearModel() {\n        console.log(this.scene);\n        this.isPlaying = false;\n        this.scene.remove(this.model);\n        this.renderer.render(this.scene, this.camera);\n        this.resetFilters();\n\n        setTimeout(() => {\n            this.initModel();\n\n            setTimeout(() => {\n                this.clearModel();\n            }, 5000);\n        }, 3000);\n    }\n\n    /**\n     * will reset configurator filters\n     */\n    resetFilters() {\n        // reset transparency radio btns\n        this.transparentInputs.forEach((input) => {\n            if (this.config.opacity.transparent && input.value === \"transparent\") {\n                input.checked = true;\n                this.opacityWrapper.style.display = \"\";\n            } else if (!this.config.opacity.transparent && input.value === \"tinted\") {\n                input.checked = true;\n                this.opacityWrapper.style.display = \"none\";\n            }\n        });\n\n        // reset finish radio btns\n        this.finishInputs.forEach((input) => {\n            if (this.config.finish.clear && input.value === \"clear\") {\n                input.checked = true;\n            } else if (!this.config.finish.clear && input.value === \"matte\") {\n                input.checked = true;\n            }\n        });\n\n        // reset color picker\n        this.colorPicker.setColor(this.config.color.color);\n\n        // reset download btn\n        this.downloadAnchor.dataset.empty = true;\n    }\n\n    /**\n     *\n     */\n    saveImage(anchor) {\n        if (anchor == null) {\n            return;\n        }\n\n        const strDownloadMime = \"image/octet-stream\";\n        const strMime = \"image/jpeg\";\n        const imgData = this.renderer.domElement.toDataURL(strMime);\n        const link = document.createElement(\"a\");\n        document.body.appendChild(link);\n        link.download = \"model-preview.jpg\";\n        link.href = imgData.replace(strMime, strDownloadMime);\n        link.click();\n        document.body.removeChild(link);\n    }\n}\n","import * as THREE from \"three\";\nimport * as dat from \"dat.gui\";\n\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n\nexport default class GLTFModelControllerShader {\n    constructor() {\n        this.DOM = {\n            modelContainer: \".js-model-container-shader\",\n        };\n    }\n\n    init() {\n        this.modelContainer = document.querySelector(this.DOM.modelContainer);\n        if (this.modelContainer !== null) {\n            console.log(\"GLTFModelControllerShader init()\");\n\n            THREE.Cache.enabled = true;\n\n            this.gui = new dat.GUI({\n                name: \"Bottle config\",\n            });\n\n            this.guiConf = {\n                autoRotation: {\n                    autoRotate: true,\n                },\n            };\n\n            this.initFBXModel();\n            this.animate();\n        }\n    }\n\n    initFBXModel() {\n        // environment\n        const path =\n            \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/1147877/winter-hdri_\";\n        const format = \".png\";\n        const order = [\"px\", \"nx\", \"py\", \"ny\", \"pz\", \"nz\"];\n        const urls = [];\n        order.forEach(side => {\n            urls.push(`${path}${side}${format}`);\n        });\n        const textureCube = new THREE.CubeTextureLoader().load(urls);\n        textureCube.format = THREE.RGBFormat;\n\n        // camera\n        this.camera = new THREE.PerspectiveCamera(\n            35,\n            window.innerWidth / window.innerHeight,\n            0.5,\n            1000,\n        );\n        this.camera.position.set(48, 20, 32);\n\n        // scene\n        this.scene = new THREE.Scene();\n        this.scene.background = textureCube;\n        this.scene.matrixAutoUpdate = false;\n\n        // shaders config\n        const shader = {\n            uniforms: {\n                mRefractionRatio: { value: 1.02 },\n                mFresnelBias: { value: 0.1 },\n                mFresnelPower: { value: 2.0 },\n                mFresnelScale: { value: 1.0 },\n                tCube: { value: null },\n            },\n            vertexShader: document.querySelector(\"#shader-vertex\").textContent,\n            fragmentShader: document.querySelector(\"#shader-fragment\").textContent,\n        };\n\n        const uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n\n        uniforms[\"tCube\"].value = textureCube;\n\n        // glass material\n        const material = new THREE.ShaderMaterial({\n            uniforms,\n            vertexShader: shader.vertexShader,\n            fragmentShader: shader.fragmentShader,\n        });\n\n        // get model\n        let model = this.modelContainer.getAttribute(\"data-model-source\");\n\n        // loader\n        const loader = new GLTFLoader();\n        loader.load(model, (model) => {\n            model.scene.traverse((object) => {\n                if (object.isMesh) {\n                    object.position.y = 0.1;\n                    object.material = material;\n                }\n            });\n\n            this.scene.add(model.scene);\n        });\n\n        // renderer\n        this.renderer = new THREE.WebGLRenderer({ antialias: true });\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.renderer.shadowMap.enabled = true;\n        this.modelContainer.appendChild(this.renderer.domElement);\n\n        // orbit controls\n        this.controls = new OrbitControls(\n            this.camera,\n            this.renderer.domElement,\n        );\n        this.controls.target.set(0, 10, 0);\n        this.controls.autoRotate = this.guiConf.autoRotation.autoRotate;\n        this.controls.autoRotateSpeed = 1;\n\n        this.gui\n            .add(this.guiConf.autoRotation, \"autoRotate\")\n            .onChange((value) => {\n                this.controls.autoRotate = value !== false;\n            });\n\n        // handle resize\n        window.addEventListener(\"resize\", () => this.onWindowResize(), false);\n    }\n\n    onWindowResize() {\n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    animate() {\n        requestAnimationFrame(() => this.animate());\n        this.renderer.render(this.scene, this.camera);\n        this.controls.update();\n    }\n}\n","/**\n * \"smart\" navigation which goes off screen when scrolling down for a better overview of content and UX\n * navigation appears when scrolling up\n */\nexport default class NavigationController {\n    constructor() {\n        /**\n         * Navigation DOM selectors\n         * Navigation DOM state CSS classes\n         * @type {{navigation: string, states: {navigationSlideUp: string, navigationScrolled: string, navigationFixed: string}}}\n         */\n\n        this.DOM = {\n            navigation: \".js-navigation-wrapper\",\n            states: {\n                navigationScrolled: \"has-scrolled\",\n                navigationFixed: \"is-fixed\",\n                navigationSlideUp: \"slide-up\",\n            },\n        };\n\n        /**\n         * flag, state variable for scrolling event\n         * @type {boolean}\n         */\n        this.scrolling = false;\n        /**\n         * amount of pixels to scroll from top for adding \"has-scrolled\" state class\n         * @type {number}\n         */\n        this.scrollNavigationOffset = 200;\n        /**\n         * variable for storing amount of scroll from top position value\n         * @type {number}\n         */\n        this.previousTop = 0;\n        /**\n         * variable for storing current scroll position value\n         * @type {number}\n         */\n        this.currentTop = 0;\n        this.scrollDelta = 0;\n        this.scrollOffset = 0;\n\n        /**\n         * fetch navigation element DOM element\n         * @type {Element}\n         */\n        this.navigation = document.querySelector(this.DOM.navigation);\n    }\n\n    //region methods\n    /**\n     *\n     */\n    init() {\n        console.log(\"Navigation init()\");\n\n        if (this.navigation !== null) {\n            this.navigationController();\n        } else {\n            console.error(`${this.DOM.navigation} does not exist in the DOM!`);\n        }\n    }\n\n    /**\n     *\n     */\n    navigationController() {\n        document.addEventListener(\"scroll\", () => {\n            if (!this.scrolling) {\n                this.scrolling = true;\n\n                if (!window.requestAnimationFrame) {\n                    setTimeout(this.checkScroll(), 250);\n                } else {\n                    requestAnimationFrame(() => this.checkScroll());\n                }\n            }\n        });\n    }\n\n    /**\n     *\n     */\n    checkScroll() {\n        /**\n         *\n         * @type {number}\n         */\n        let currentTop = window.pageYOffset | document.body.scrollTop;\n\n        this.changeNavigationState(currentTop);\n\n        this.previousTop = currentTop;\n        this.scrolling = false;\n    }\n\n    /**\n     *\n     * @param currentTop\n     */\n    changeNavigationState(currentTop) {\n        if (currentTop > this.scrollNavigationOffset) {\n            this.navigation.classList.add(this.DOM.states.navigationScrolled);\n        } else {\n            this.navigation.classList.remove(\n                this.DOM.states.navigationScrolled,\n            );\n        }\n\n        if (this.previousTop >= currentTop) {\n            this.scrollingUp(currentTop);\n        } else {\n            this.scrollingDown(currentTop);\n        }\n    }\n\n    /**\n     *\n     * @param currentTop\n     */\n    scrollingUp(currentTop) {\n        if (currentTop < this.scrollNavigationOffset) {\n            this.navigation.classList.remove(this.DOM.states.navigationSlideUp);\n        } else if (this.previousTop - currentTop > this.scrollDelta) {\n            this.navigation.classList.remove(this.DOM.states.navigationSlideUp);\n        }\n    }\n\n    /**\n     *\n     * @param currentTop\n     */\n    scrollingDown(currentTop) {\n        if (currentTop > this.scrollNavigationOffset + this.scrollOffset) {\n            this.navigation.classList.add(this.DOM.states.navigationSlideUp);\n        } else if (currentTop > this.scrollNavigationOffset) {\n            this.navigation.classList.remove(this.DOM.states.navigationSlideUp);\n        }\n    }\n\n    //endregion\n}\n","import * as THREE from \"three\";\nimport * as dat from \"dat.gui\";\nimport gsap from \"gsap\";\n\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader\";\nimport { RoomEnvironment } from \"three/examples/jsm/environments/RoomEnvironment\";\nimport { log } from \"three\";\n\nexport default class SofaModelController {\n    constructor() {\n        this.DOM = {\n            modelContainer: \".js-sofa-container\",\n        };\n    }\n\n    init() {\n        this.modelContainer = document.querySelector(this.DOM.modelContainer);\n        if (this.modelContainer !== null) {\n            console.log(\"GLTFModelController init()\");\n\n            this.width = this.modelContainer.offsetWidth;\n            this.height = this.modelContainer.offsetHeight;\n\n            THREE.Cache.enabled = true;\n\n            this.texture = new THREE.TextureLoader();\n\n            // gui\n            this.gui = new dat.GUI({\n                name: \"Sofa config\",\n            });\n\n            // gui config\n            this.guiConf = {\n                autoRotation: {\n                    autoRotate: false,\n                },\n                grid: {\n                    showGrid: true,\n                },\n                sofaMaterial: \"1\",\n                sphereMaterial: \"1\",\n            };\n\n            this.initFBXModel();\n            this.animate();\n        }\n    }\n\n    initFBXModel() {\n        // camera\n        this.camera = new THREE.PerspectiveCamera(35, this.width / this.height, 0.5, 400);\n        this.camera.position.set(17, 10, 17);\n\n        // scene\n        this.scene = new THREE.Scene();\n        this.scene.background = new THREE.Color(0xbbbbbb);\n\n        // ground grid\n        const grid = new THREE.GridHelper(2000, 40, 0x000000, 0x000000);\n        grid.material.opacity = 0.1;\n        grid.material.transparent = true;\n        this.scene.add(grid);\n        if (!this.guiConf.grid.showGrid) {\n            grid.visible = false;\n        }\n\n        // add gui for grid\n        this.gui.add(this.guiConf.grid, \"showGrid\").onChange((value) => {\n            grid.visible = !!value;\n        });\n\n        // renderer\n        this.renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            powerPreference: \"high-performance\",\n        });\n\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.setSize(this.width, this.height);\n        this.renderer.shadowMap.enabled = true;\n        this.renderer.gammaFactor = 2.2;\n        this.renderer.outputEncoding = THREE.sRGBEncoding;\n        this.renderer.physicallyCorrectLights = true;\n        this.renderer.shadowMap.type = THREE.PCFShadowMap;\n        this.renderer.toneMapping = THREE.ACESFilmicToneMapping;\n        this.renderer.toneMappingExposure = 1;\n        this.modelContainer.appendChild(this.renderer.domElement);\n\n        const environment = new RoomEnvironment();\n        this.pmremGenerator = new THREE.PMREMGenerator(this.renderer);\n        this.scene.environment = this.pmremGenerator.fromScene(environment).texture;\n\n        // loader\n        this.loadModel();\n        this.loadSphere();\n\n        // orbit controls\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n        this.controls.target.set(0, 1, 0);\n        this.controls.autoRotate = this.guiConf.autoRotation.autoRotate;\n        this.controls.autoRotateSpeed = 1;\n        this.controls.enableDamping = true;\n        this.controls.minDistance = 4;\n        this.controls.maxDistance = 30;\n        this.controls.maxPolarAngle = Math.PI / 2;\n        this.controls.minPolarAngle = 0;\n        this.controls.update();\n\n        this.gui.add(this.guiConf.autoRotation, \"autoRotate\").onChange((value) => {\n            this.controls.autoRotate = value !== false;\n        });\n\n        // handle resize\n        window.addEventListener(\"resize\", () => this.onWindowResize(), false);\n    }\n\n    loadModel() {\n        const materials = {\n            mat1: {\n                base: this.texture.load(\"static/models/mat1/base.jpg\"),\n                height: this.texture.load(\"static/models/mat1/height.png\"),\n                ao: this.texture.load(\"static/models/mat1/ao.jpg\"),\n                norm: this.texture.load(\"static/models/mat1/norm.jpg\"),\n                rough: this.texture.load(\"static/models/mat1/rough.jpg\"),\n            },\n            mat2: {\n                base: this.texture.load(\"static/models/mat2/base.jpg\"),\n                height: this.texture.load(\"static/models/mat2/height.png\"),\n                ao: this.texture.load(\"static/models/mat2/ao.jpg\"),\n                norm: this.texture.load(\"static/models/mat2/norm.jpg\"),\n                rough: this.texture.load(\"static/models/mat2/rough.jpg\"),\n            },\n            mat3: {\n                base: this.texture.load(\"static/models/mat3/base.jpg\"),\n                height: this.texture.load(\"static/models/mat3/height.png\"),\n                ao: this.texture.load(\"static/models/mat3/ao.jpg\"),\n                norm: this.texture.load(\"static/models/mat3/norm.jpg\"),\n                rough: this.texture.load(\"static/models/mat3/rough.jpg\"),\n            },\n            mat4: {\n                base: this.texture.load(\"static/models/mat4/base.jpg\"),\n                height: this.texture.load(\"static/models/mat4/height.png\"),\n                ao: this.texture.load(\"static/models/mat4/ao.jpg\"),\n                norm: this.texture.load(\"static/models/mat4/norm.jpg\"),\n                rough: this.texture.load(\"static/models/mat4/rough.jpg\"),\n            },\n            lion: {\n                base: this.texture.load(\"static/models/matLion/base.jpg\", (tex) => {\n                    tex.encoding = THREE.sRGBEncoding;\n                }),\n                height: this.texture.load(\"static/models/matLion/height.jpg\", (tex) => {\n                    tex.encoding = THREE.sRGBEncoding;\n                }),\n                ao: this.texture.load(\"static/models/matLion/ao.jpg\", (tex) => {\n                    tex.encoding = THREE.sRGBEncoding;\n                }),\n                norm: this.texture.load(\"static/models/matLion/norm.jpg\", (tex) => {\n                    tex.encoding = THREE.sRGBEncoding;\n                }),\n                rough: this.texture.load(\"static/models/matLion/rough.jpg\", (tex) => {\n                    tex.encoding = THREE.sRGBEncoding;\n                }),\n            },\n        };\n\n        let material = new THREE.MeshPhysicalMaterial({\n            map: materials.mat1.base,\n            aoMap: materials.mat1.ao,\n            aoMapIntensity: 1,\n            normalMap: materials.mat1.norm,\n            displacementMap: materials.mat1.height,\n            displacementScale: 0,\n            roughnessMap: materials.mat1.rough,\n            metalness: 0,\n            flatShading: false,\n        });\n\n        material.map.minFilter = THREE.NearestFilter;\n        material.map.generateMipmaps = false;\n        material.map.wrapS = material.map.wrapT = THREE.RepeatWrapping;\n        material.aoMap.wrapS = material.aoMap.wrapT = THREE.RepeatWrapping;\n        material.displacementMap.wrapS = material.displacementMap.wrapT = THREE.RepeatWrapping;\n        material.normalMap.wrapS = material.normalMap.wrapT = THREE.RepeatWrapping;\n        material.roughnessMap.wrapS = material.roughnessMap.wrapT = THREE.RepeatWrapping;\n\n        material.map.repeat.set(0.15, 0.15);\n        material.aoMap.repeat.set(0.15, 0.15);\n        material.displacementMap.repeat.set(0.15, 0.15);\n        material.normalMap.repeat.set(0.15, 0.15);\n        material.roughnessMap.repeat.set(0.15, 0.15);\n\n        // get model\n        let model = this.modelContainer.getAttribute(\"data-model-source\");\n\n        // loader\n        const loader = new GLTFLoader();\n\n        const dracoLoader = new DRACOLoader();\n        dracoLoader.setDecoderPath(\"draco/\");\n        loader.setDRACOLoader(dracoLoader);\n\n        loader.load(model, (model) => {\n            model.scene.position.x = -4;\n            material.color.convertSRGBToLinear();\n\n            model.scene.traverse((object) => {\n                if (object.isMesh) {\n                    object.castShadow = true;\n                    object.receiveShadow = true;\n                    object.material.color.convertSRGBToLinear();\n\n                    // initial material setup\n                    object.material = material;\n                }\n            });\n\n            this.gui\n                .add(this.guiConf, \"sofaMaterial\", {\n                    Material1: 1,\n                    Material2: 2,\n                    Material3: 3,\n                    Material4: 4,\n                    Material5: 5,\n                })\n                .onChange((value) => {\n                    this.transformMaterial(value, material, materials, 0.15);\n                });\n\n            this.scene.add(model.scene);\n        });\n    }\n\n    loadSphere() {\n        const materials = {\n            mat1: {\n                base: this.texture.load(\"static/models/mat1/base.jpg\"),\n                height: this.texture.load(\"static/models/mat1/height.png\"),\n                ao: this.texture.load(\"static/models/mat1/ao.jpg\"),\n                norm: this.texture.load(\"static/models/mat1/norm.jpg\"),\n                rough: this.texture.load(\"static/models/mat1/rough.jpg\"),\n            },\n            mat2: {\n                base: this.texture.load(\"static/models/mat2/base.jpg\"),\n                height: this.texture.load(\"static/models/mat2/height.png\"),\n                ao: this.texture.load(\"static/models/mat2/ao.jpg\"),\n                norm: this.texture.load(\"static/models/mat2/norm.jpg\"),\n                rough: this.texture.load(\"static/models/mat2/rough.jpg\"),\n            },\n            mat3: {\n                base: this.texture.load(\"static/models/mat3/base.jpg\"),\n                height: this.texture.load(\"static/models/mat3/height.png\"),\n                ao: this.texture.load(\"static/models/mat3/ao.jpg\"),\n                norm: this.texture.load(\"static/models/mat3/norm.jpg\"),\n                rough: this.texture.load(\"static/models/mat3/rough.jpg\"),\n            },\n            mat4: {\n                base: this.texture.load(\"static/models/mat4/base.jpg\"),\n                height: this.texture.load(\"static/models/mat4/height.png\"),\n                ao: this.texture.load(\"static/models/mat4/ao.jpg\"),\n                norm: this.texture.load(\"static/models/mat4/norm.jpg\"),\n                rough: this.texture.load(\"static/models/mat4/rough.jpg\"),\n            },\n            lion: {\n                base: this.texture.load(\"static/models/matLion/base.jpg\"),\n                height: this.texture.load(\"static/models/matLion/height.jpg\"),\n                ao: this.texture.load(\"static/models/matLion/ao.jpg\"),\n                norm: this.texture.load(\"static/models/matLion/norm.jpg\"),\n                rough: this.texture.load(\"static/models/matLion/rough.jpg\"),\n            },\n        };\n\n        let material = new THREE.MeshPhysicalMaterial({\n            map: materials.mat1.base,\n            aoMap: materials.mat1.ao,\n            aoMapIntensity: 1,\n            normalMap: materials.mat1.norm,\n            displacementMap: materials.mat1.height,\n            displacementScale: 0.025,\n            roughnessMap: materials.mat1.rough,\n            metalness: 0,\n            flatShading: false,\n        });\n\n        material.map.minFilter = THREE.NearestFilter;\n        material.map.generateMipmaps = false;\n        material.map.wrapS = material.map.wrapT = THREE.RepeatWrapping;\n        material.aoMap.wrapS = material.aoMap.wrapT = THREE.RepeatWrapping;\n        material.displacementMap.wrapS = material.displacementMap.wrapT = THREE.RepeatWrapping;\n        material.normalMap.wrapS = material.normalMap.wrapT = THREE.RepeatWrapping;\n        material.roughnessMap.wrapS = material.roughnessMap.wrapT = THREE.RepeatWrapping;\n\n        material.map.repeat.set(4, 4);\n        material.aoMap.repeat.set(4, 4);\n        material.displacementMap.repeat.set(4, 4);\n        material.normalMap.repeat.set(4, 4);\n        material.roughnessMap.repeat.set(4, 4);\n\n        this.gui\n            .add(this.guiConf, \"sphereMaterial\", {\n                Material1: 1,\n                Material2: 2,\n                Material3: 3,\n                Material4: 4,\n                Material5: 5,\n            })\n            .onChange((value) => {\n                this.transformMaterial(value, material, materials, 4);\n            });\n\n        this.sphere(material);\n    }\n\n    sphere(material) {\n        const geometry = new THREE.SphereGeometry(1.5, 400, 400);\n        const sphere = new THREE.Mesh(geometry, material);\n        sphere.position.set(4, 2, 0);\n        this.scene.add(sphere);\n\n        gsap.to(sphere.rotation, {\n            duration: 20,\n            ease: \"none\",\n            y: Math.PI * 2,\n            repeat: -1,\n        });\n    }\n\n    transformMaterial(index, material, materials, scale) {\n        let mat = null;\n\n        if (index === \"2\") {\n            mat = materials.mat2;\n        } else if (index === \"3\") {\n            mat = materials.mat3;\n        } else if (index === \"4\") {\n            mat = materials.mat4;\n        } else if (index === \"5\") {\n            mat = materials.lion;\n        } else {\n            mat = materials.mat1;\n        }\n\n        mat.base.minFilter = THREE.NearestFilter;\n        mat.base.generateMipmaps = false;\n        material.map = mat.base;\n        material.aoMap = mat.ao;\n        material.normalMap = mat.norm;\n        material.roughnessMap = mat.rough;\n\n        material.map.wrapS = material.map.wrapT = THREE.RepeatWrapping;\n        material.aoMap.wrapS = material.aoMap.wrapT = THREE.RepeatWrapping;\n        material.displacementMap.wrapS = material.displacementMap.wrapT = THREE.RepeatWrapping;\n        material.normalMap.wrapS = material.normalMap.wrapT = THREE.RepeatWrapping;\n        material.roughnessMap.wrapS = material.roughnessMap.wrapT = THREE.RepeatWrapping;\n\n        material.map.repeat.set(scale, scale);\n        material.aoMap.repeat.set(scale, scale);\n        material.displacementMap.repeat.set(scale, scale);\n        material.normalMap.repeat.set(scale, scale);\n        material.roughnessMap.repeat.set(scale, scale);\n    }\n\n    onWindowResize() {\n        this.camera.aspect = this.width / this.height;\n\n        this.renderer.setSize(this.width, this.height);\n    }\n\n    animate() {\n        requestAnimationFrame(() => this.animate());\n        this.renderer.render(this.scene, this.camera);\n        this.controls.update();\n    }\n}\n","/**\n * Grid helper\n * Show grid overlay when developing\n * Not included in production bundle JS file\n */\nexport default class GridHelper {\n    constructor() {\n        /**\n         * Grid DOM selector\n         * @type {{grid: string}}\n         */\n        this.DOM = {\n            grid: \"grid\",\n        };\n\n        /**\n         * Grid options\n         * @type {{gutterFixed: boolean, initialDisplay: string, gridFixed: boolean, gutterWidth: number, gridColor: string, columnCount: number, gridWidth: number, columnBgColor: string}}\n         */\n        this.gridOptions = {\n            initialDisplay: \"none\", // \"flex\" or \"none\"\n            columnCount: 24,\n            gridWidth: 1440, // px\n            gridFixed: true,\n            gutterWidth: 0, // px\n            gutterFixed: false,\n            gridColor: \"rgb(255, 0, 255, 0.15)\",\n            columnBgColor: \"rgb(255, 0, 255, 0.025)\",\n        };\n\n        const consoleLogStyle = [\n            \"background-color: #a6a6a6\",\n            \"color: black\",\n            \"display: block\",\n            \"line-height: 24px\",\n            \"text-align: center\",\n            \"border: 1px solid #ffffff\",\n            \"font-weight: bold\",\n        ].join(\";\");\n\n        console.info(\"toggle grid: %c Alt/Option + G \", consoleLogStyle);\n\n        this.grid = null;\n\n        this.columnWidth =\n            (this.gridOptions.gridWidth -\n                (this.gridOptions.columnCount - 1) *\n                    this.gridOptions.gutterWidth) /\n            this.gridOptions.columnCount;\n\n        this.columnWidthPercentage = `${\n            (this.columnWidth / this.gridOptions.gridWidth) * 100\n        }%`;\n\n        this.gutterWidthPercentage = `${\n            (this.gridOptions.gutterWidth / this.gridOptions.gridWidth) * 100\n        }%`;\n    }\n\n    init() {\n        console.log(\"GridHelper init()\");\n        this.initGrid();\n        this.keyboardShortcut();\n    }\n\n    initGrid() {\n        // create grid overlay element\n        this.grid = document.createElement(\"div\");\n        this.grid.id = this.DOM.grid;\n\n        // style grid element\n        this.grid.style.cssText = `\n            pointer-events: none;\n            display: ${this.gridOptions.initialDisplay};\n            flex-direction: row;\n            width: 100%;\n            height: 100%;\n            position: absolute;\n            top: 0;\n            left: 50%;\n            transform: translateX(-50%);\n            z-index: 999;\n        `;\n\n        if (this.gridOptions.gridFixed === true) {\n            this.grid.style.maxWidth = `${this.gridOptions.gridWidth}px`;\n        }\n\n        if (!this.gridOptions.gutterWidth > 0) {\n            this.grid.style.borderLeft = \"none\";\n        }\n\n        // add grid container to page\n        document.body.appendChild(this.grid);\n\n        // add columns to grid\n        for (var i = 0; i < this.gridOptions.columnCount; i++) {\n            var column = document.createElement(\"i\");\n            this.grid.appendChild(column);\n\n            column.style.cssText = `\n                height: auto;\n                flex-grow: 1;\n                background-color: ${this.gridOptions.columnBgColor};\n                border-left: 1px solid ${this.gridOptions.gridColor};\n            `;\n\n            if (this.gridOptions.gutterWidth > 0) {\n                column.style.borderRight = `1px solid ${this.gridOptions.gridColor}`;\n            } else {\n                this.grid.style.borderRight = `1px solid ${this.gridOptions.gridColor}`;\n            }\n\n            if (this.gridOptions.gutterFixed === true) {\n                column.style.marginRight = `${this.gridOptions.gutterWidth}px`;\n            } else {\n                column.style.marginRight = this.gutterWidthPercentage;\n                column.style.width = this.columnWidthPercentage;\n            }\n        }\n\n        this.grid.lastChild.style.marginRight = 0;\n    }\n\n    keyboardShortcut() {\n        document.addEventListener(\"keyup\", (ev) => {\n            if (ev.keyCode === 71 && ev.altKey) {\n                if (this.grid.style.display === \"none\") {\n                    this.grid.style.display = \"flex\";\n                } else {\n                    this.grid.style.display = \"none\";\n                }\n            }\n        });\n    }\n}\n","/**\n * MAIN JS FILE\n */\n\n/**\n * Helpers\n * Imports of helper functions are stripped out of bundle\n * Include them within \"start-strip-code\" and \"end-strip-code\" comments\n */\n/* start-strip-code */\nimport GridHelper from \"./helpers/GridHelper\";\n/* end-strip-code */\n/**\n * Components\n */\nimport NavigationController from \"./components/NavigationController\";\nimport GLTFModelController from \"./components/GLTFModelController\";\nimport GLTFModelControllerShader from \"./components/GLTFModelControllerShader\";\nimport GLTFModelControllerEnvironment from \"./components/GLTFModelControllerEnvironment\";\nimport SofaModelController from \"./components/SofaModelController\";\n\n/**\n * Check if document is ready cross-browser\n * @param callback\n */\nconst ready = (callback) => {\n    if (document.readyState !== \"loading\") {\n        /**\n         * Document is already ready, call the callback directly\n         */\n        callback();\n    } else if (document.addEventListener) {\n        /**\n         * All modern browsers to register DOMContentLoaded\n         */\n        document.addEventListener(\"DOMContentLoaded\", callback);\n    } else {\n        /**\n         * Old IE browsers\n         */\n        document.attachEvent(\"onreadystatechange\", function () {\n            if (document.readyState === \"complete\") {\n                callback();\n            }\n        });\n    }\n};\n\n/**\n * Document ready callback\n */\nready(() => {\n    /**\n     * HELPERS INIT\n     * Only init helpers if they exist\n     * Will be undefined on production because of import stripping\n     */\n    if (typeof GridHelper == \"function\") {\n        const grid = new GridHelper();\n        grid.init();\n    }\n\n    /**\n     * CREDITS INIT\n     */\n    const credits = [\n        \"background-color: #000000\",\n        \"color: white\",\n        \"display: block\",\n        \"line-height: 24px\",\n        \"text-align: center\",\n        \"border: 1px solid #ffffff\",\n        \"font-weight: bold\",\n    ].join(\";\");\n    console.info(\"dev by: %c Bornfight \", credits);\n\n    /**\n     * COMPONENTS INIT\n     */\n\n    /**\n     * Navigation\n     * @type {NavigationController}\n     */\n    const navigation = new NavigationController();\n    navigation.init();\n\n    const gltfModelController = new GLTFModelController();\n    gltfModelController.init();\n\n    const gLTFModelControllerShader = new GLTFModelControllerShader();\n    gLTFModelControllerShader.init();\n\n    const gLTFModelControllerEnvironment = new GLTFModelControllerEnvironment();\n    gLTFModelControllerEnvironment.init();\n\n    const sofaModelController = new SofaModelController();\n    sofaModelController.init();\n});\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzdGF0aWMvanMvY29tcG9uZW50cy9HTFRGTW9kZWxDb250cm9sbGVyLmpzIiwic3RhdGljL2pzL2NvbXBvbmVudHMvR0xURk1vZGVsQ29udHJvbGxlckVudmlyb25tZW50LmpzIiwic3RhdGljL2pzL2NvbXBvbmVudHMvR0xURk1vZGVsQ29udHJvbGxlclNoYWRlci5qcyIsInN0YXRpYy9qcy9jb21wb25lbnRzL05hdmlnYXRpb25Db250cm9sbGVyLmpzIiwic3RhdGljL2pzL2NvbXBvbmVudHMvU29mYU1vZGVsQ29udHJvbGxlci5qcyIsInN0YXRpYy9qcy9oZWxwZXJzL0dyaWRIZWxwZXIuanMiLCJzdGF0aWMvanMvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7QUNBQTs7QUFDQTs7QUFFQTs7QUFDQTs7Ozs7Ozs7Ozs7O0lBRXFCLG1CO0FBQ2pCLGlDQUFjO0FBQUE7O0FBQ1YsU0FBSyxHQUFMLEdBQVc7QUFDUCxNQUFBLGNBQWMsRUFBRTtBQURULEtBQVg7QUFHSDs7OzsyQkFFTTtBQUNILFdBQUssY0FBTCxHQUFzQixRQUFRLENBQUMsYUFBVCxDQUF1QixLQUFLLEdBQUwsQ0FBUyxjQUFoQyxDQUF0Qjs7QUFDQSxVQUFJLEtBQUssY0FBTCxLQUF3QixJQUE1QixFQUFrQztBQUM5QixRQUFBLE9BQU8sQ0FBQyxHQUFSLENBQVksNEJBQVo7QUFFQSxhQUFLLEtBQUwsR0FBYSxLQUFLLGNBQUwsQ0FBb0IsV0FBakM7QUFDQSxhQUFLLE1BQUwsR0FBYyxLQUFLLGNBQUwsQ0FBb0IsWUFBbEM7QUFFQSxRQUFBLEtBQUssQ0FBQyxLQUFOLENBQVksT0FBWixHQUFzQixJQUF0QixDQU44QixDQVE5Qjs7QUFDQSxhQUFLLEdBQUwsR0FBVyxJQUFJLEdBQUcsQ0FBQyxHQUFSLENBQVk7QUFDbkIsVUFBQSxJQUFJLEVBQUU7QUFEYSxTQUFaLENBQVgs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RUEsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLDRCQUFKLEVBQTVCO0FBQ0EsRUFBQSxtQkFBbUIsQ0FBQyxJQUFwQjtBQUNILENBL0NJLENBQUwiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tIFwidGhyZWVcIjtcbmltcG9ydCAqIGFzIGRhdCBmcm9tIFwiZGF0Lmd1aVwiO1xuXG5pbXBvcnQgeyBPcmJpdENvbnRyb2xzIH0gZnJvbSBcInRocmVlL2V4YW1wbGVzL2pzbS9jb250cm9scy9PcmJpdENvbnRyb2xzXCI7XG5pbXBvcnQgeyBHTFRGTG9hZGVyIH0gZnJvbSBcInRocmVlL2V4YW1wbGVzL2pzbS9sb2FkZXJzL0dMVEZMb2FkZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR0xURk1vZGVsQ29udHJvbGxlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuRE9NID0ge1xuICAgICAgICAgICAgbW9kZWxDb250YWluZXI6IFwiLmpzLW1vZGVsLWNvbnRhaW5lclwiLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGluaXQoKSB7XG4gICAgICAgIHRoaXMubW9kZWxDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuRE9NLm1vZGVsQ29udGFpbmVyKTtcbiAgICAgICAgaWYgKHRoaXMubW9kZWxDb250YWluZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiR0xURk1vZGVsQ29udHJvbGxlciBpbml0KClcIik7XG5cbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB0aGlzLm1vZGVsQ29udGFpbmVyLm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLm1vZGVsQ29udGFpbmVyLm9mZnNldEhlaWdodDtcblxuICAgICAgICAgICAgVEhSRUUuQ2FjaGUuZW5hYmxlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIC8vIGd1aVxuICAgICAgICAgICAgdGhpcy5ndWkgPSBuZXcgZGF0LkdVSSh7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCb3R0bGUgY29uZmlnXCIsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gZ3VpIGNvbmZpZ1xuICAgICAgICAgICAgdGhpcy5ndWlDb25mID0ge1xuICAgICAgICAgICAgICAgIGxpZ2h0OiB7XG4gICAgICAgICAgICAgICAgICAgIGxpZ2h0SW50ZW5zaXR5OiA2LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29sb3I6IHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwiIzAwMDVhMFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXV0b1JvdGF0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIGF1dG9Sb3RhdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zcGFyZW50OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLjMsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnbG9zc3k6IHtcbiAgICAgICAgICAgICAgICAgICAgZ2xhc3M6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGVtaXNzaXZlQ29sb3I6IFwiIzFlMGYwZlwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ3JpZDoge1xuICAgICAgICAgICAgICAgICAgICBzaG93R3JpZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMuaW5pdEZCWE1vZGVsKCk7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGluaXRGQlhNb2RlbCgpIHtcbiAgICAgICAgLy8gY2FtZXJhXG4gICAgICAgIHRoaXMuY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKFxuICAgICAgICAgICAgMzUsXG4gICAgICAgICAgICB0aGlzLndpZHRoIC8gdGhpcy5oZWlnaHQsXG4gICAgICAgICAgICAwLjUsXG4gICAgICAgICAgICA0MDAsXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnNldCgzNSwgMTAsIDMyKTtcblxuICAgICAgICAvLyBzY2VuZVxuICAgICAgICB0aGlzLnNjZW5lID0gbmV3IFRIUkVFLlNjZW5lKCk7XG4gICAgICAgIHRoaXMuc2NlbmUuYmFja2dyb3VuZCA9IG5ldyBUSFJFRS5Db2xvcigweGZmZmZmZik7XG4gICAgICAgIC8vIHRoaXMuc2NlbmUuYmFja2dyb3VuZCA9IG5ldyBUSFJFRS5Db2xvcigweGEwYTBhMCk7XG4gICAgICAgIC8vIHRoaXMuc2NlbmUuZm9nID0gbmV3IFRIUkVFLkZvZygweGEwYTBhMCwgMjAwLCA0MDApO1xuXG4gICAgICAgIC8vIGxpZ2h0c1xuICAgICAgICBjb25zdCBoZW1pTGlnaHQgPSBuZXcgVEhSRUUuSGVtaXNwaGVyZUxpZ2h0KDB4ZmZmZmZmLCAweDk5OTk5OSk7XG4gICAgICAgIGhlbWlMaWdodC5wb3NpdGlvbi5zZXQoMCwgMjAwLCAwKTtcbiAgICAgICAgdGhpcy5zY2VuZS5hZGQoaGVtaUxpZ2h0KTtcblxuICAgICAgICB0aGlzLmFtYmllbnRMaWdodCA9IG5ldyBUSFJFRS5BbWJpZW50TGlnaHQoMHg0MDQwNDApO1xuICAgICAgICB0aGlzLmFtYmllbnRMaWdodC5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2NlbmUuYWRkKHRoaXMuYW1iaWVudExpZ2h0KTtcblxuICAgICAgICAvLyB0aGlzIGlzIGp1c3QgYmFjayBsaWdodCAtIHdpdGhvdXQgaXQgYmFjayBzaWRlIG9mIG1vZGVsIHdvdWxkIGJlIGJhcmVseSB2aXNpYmxlXG4gICAgICAgIHRoaXMuZGlyU3ViTGlnaHQgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCgweGNjY2NjYywgMSk7XG4gICAgICAgIHRoaXMuZGlyU3ViTGlnaHQucG9zaXRpb24uc2V0KC0yMCwgMjAsIC0yMCk7XG4gICAgICAgIHRoaXMuZGlyU3ViTGlnaHQubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNjZW5lLmFkZCh0aGlzLmRpclN1YkxpZ2h0KTtcblxuICAgICAgICB0aGlzLmRpckxpZ2h0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoMHhjY2NjY2MsIHRoaXMuZ3VpQ29uZi5saWdodC5saWdodEludGVuc2l0eSk7XG4gICAgICAgIHRoaXMuZGlyTGlnaHQucG9zaXRpb24uc2V0KDIwLCAzMCwgMjApO1xuICAgICAgICB0aGlzLmRpckxpZ2h0LmNhc3RTaGFkb3cgPSB0cnVlO1xuICAgICAgICB0aGlzLmRpckxpZ2h0LnNoYWRvdy5jYW1lcmEudG9wID0gMTgwO1xuICAgICAgICB0aGlzLmRpckxpZ2h0LnNoYWRvdy5jYW1lcmEuYm90dG9tID0gLTEwMDtcbiAgICAgICAgdGhpcy5kaXJMaWdodC5zaGFkb3cuY2FtZXJhLmxlZnQgPSAtMTIwO1xuICAgICAgICB0aGlzLmRpckxpZ2h0LnNoYWRvdy5jYW1lcmEucmlnaHQgPSAxMjA7XG4gICAgICAgIHRoaXMuZGlyTGlnaHQuc2hhZG93Lm1hcFNpemUud2lkdGggPSA0MDk2O1xuICAgICAgICB0aGlzLmRpckxpZ2h0LnNoYWRvdy5tYXBTaXplLmhlaWdodCA9IDQwOTY7XG4gICAgICAgIHRoaXMuZGlyTGlnaHQubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRpckxpZ2h0LnNoYWRvdy5yYWRpdXMgPSA0O1xuICAgICAgICB0aGlzLmRpckxpZ2h0LnNoYWRvdy5iaWFzID0gMC4wMDAxO1xuICAgICAgICB0aGlzLnNjZW5lLmFkZCh0aGlzLmRpckxpZ2h0KTtcblxuICAgICAgICAvLyBhZGQgZ3VpIGZvciBsaWdodCBpbnRlbnNpdHlcbiAgICAgICAgdGhpcy5ndWlcbiAgICAgICAgICAgIC5hZGQodGhpcy5ndWlDb25mLmxpZ2h0LCBcImxpZ2h0SW50ZW5zaXR5XCIsIDEsIDEwLCAwLjEpXG4gICAgICAgICAgICAub25DaGFuZ2UoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXJMaWdodC5pbnRlbnNpdHkgPSB2YWx1ZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGdyb3VuZFxuICAgICAgICAvLyBjb25zdCBtZXNoID0gbmV3IFRIUkVFLk1lc2goXG4gICAgICAgIC8vICAgICBuZXcgVEhSRUUuUGxhbmVCdWZmZXJHZW9tZXRyeSgxMDAwLCAxMDAwLCAxLCAxKSxcbiAgICAgICAgLy8gICAgIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7IGNvbG9yOiAweGVlZWVlZSwgZGVwdGhXcml0ZTogZmFsc2UgfSksXG4gICAgICAgIC8vICk7XG4gICAgICAgIC8vIG1lc2gubWF0ZXJpYWwuY29sb3IuY29udmVydFNSR0JUb0xpbmVhcigpO1xuICAgICAgICAvLyBtZXNoLnJvdGF0aW9uLnggPSAtTWF0aC5QSSAvIDI7XG4gICAgICAgIC8vIG1lc2gucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG4gICAgICAgIC8vIHRoaXMuc2NlbmUuYWRkKG1lc2gpO1xuXG4gICAgICAgIC8vIGdyb3VuZCBncmlkXG4gICAgICAgIGNvbnN0IGdyaWQgPSBuZXcgVEhSRUUuR3JpZEhlbHBlcigyMDAwLCA0MCwgMHgwMDAwMDAsIDB4MDAwMDAwKTtcbiAgICAgICAgZ3JpZC5tYXRlcmlhbC5vcGFjaXR5ID0gMC4xO1xuICAgICAgICBncmlkLm1hdGVyaWFsLnRyYW5zcGFyZW50ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zY2VuZS5hZGQoZ3JpZCk7XG4gICAgICAgIGlmICghdGhpcy5ndWlDb25mLmdyaWQuc2hvd0dyaWQpIHtcbiAgICAgICAgICAgIGdyaWQudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIGd1aSBmb3IgZ3JpZFxuICAgICAgICB0aGlzLmd1aVxuICAgICAgICAgICAgLmFkZCh0aGlzLmd1aUNvbmYuZ3JpZCwgXCJzaG93R3JpZFwiKVxuICAgICAgICAgICAgLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGdyaWQudmlzaWJsZSA9ICEhdmFsdWU7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyByZW5kZXJlclxuICAgICAgICB0aGlzLnJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoe1xuICAgICAgICAgICAgYW50aWFsaWFzOiB0cnVlLFxuICAgICAgICAgICAgZGVwdGg6IGZhbHNlLFxuICAgICAgICAgICAgcG93ZXJQcmVmZXJlbmNlOiBcImhpZ2gtcGVyZm9ybWFuY2VcIixcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0UGl4ZWxSYXRpbyh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U2l6ZSh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2hhZG93TWFwLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmdhbW1hRmFjdG9yID0gMi4yO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLm91dHB1dEVuY29kaW5nID0gVEhSRUUuc1JHQkVuY29kaW5nO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zaGFkb3dNYXAudHlwZSA9IFRIUkVFLlBDRlNoYWRvd01hcDtcbiAgICAgICAgdGhpcy5tb2RlbENvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQpO1xuXG4gICAgICAgIC8vIGxvYWRlclxuICAgICAgICB0aGlzLmxvYWRNb2RlbCgpO1xuXG4gICAgICAgIC8vIG9yYml0IGNvbnRyb2xzXG4gICAgICAgIHRoaXMuY29udHJvbHMgPSBuZXcgT3JiaXRDb250cm9scyhcbiAgICAgICAgICAgIHRoaXMuY2FtZXJhLFxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5kb21FbGVtZW50LFxuICAgICAgICApO1xuICAgICAgICB0aGlzLmNvbnRyb2xzLnRhcmdldC5zZXQoMCwgMTAsIDApO1xuICAgICAgICB0aGlzLmNvbnRyb2xzLmF1dG9Sb3RhdGUgPSB0aGlzLmd1aUNvbmYuYXV0b1JvdGF0aW9uLmF1dG9Sb3RhdGU7XG4gICAgICAgIHRoaXMuY29udHJvbHMuYXV0b1JvdGF0ZVNwZWVkID0gMTtcbiAgICAgICAgdGhpcy5jb250cm9scy5lbmFibGVab29tID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29udHJvbHMuZW5hYmxlUGFuID0gZmFsc2U7XG5cbiAgICAgICAgLy8gdGhpcy5jb250cm9scy5tYXhQb2xhckFuZ2xlID0gTWF0aC5QSSAvIDI7XG4gICAgICAgIC8vIHRoaXMuY29udHJvbHMubWluUG9sYXJBbmdsZSA9IE1hdGguUEkgLyAzO1xuXG4gICAgICAgIHRoaXMuZ3VpXG4gICAgICAgICAgICAuYWRkKHRoaXMuZ3VpQ29uZi5hdXRvUm90YXRpb24sIFwiYXV0b1JvdGF0ZVwiKVxuICAgICAgICAgICAgLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xzLmF1dG9Sb3RhdGUgPSB2YWx1ZSAhPT0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyBoYW5kbGUgcmVzaXplXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsICgpID0+IHRoaXMub25XaW5kb3dSZXNpemUoKSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGxvYWRNb2RlbCgpIHtcbiAgICAgICAgLy8gZ2V0IG1vZGVsXG4gICAgICAgIGxldCBtb2RlbCA9IHRoaXMubW9kZWxDb250YWluZXIuZ2V0QXR0cmlidXRlKFwiZGF0YS1tb2RlbC1zb3VyY2VcIik7XG5cbiAgICAgICAgLy8gbG9hZGVyXG4gICAgICAgIGNvbnN0IGxvYWRlciA9IG5ldyBHTFRGTG9hZGVyKCk7XG4gICAgICAgIGxvYWRlci5sb2FkKG1vZGVsLCAobW9kZWwpID0+IHtcbiAgICAgICAgICAgIC8vIGR5bmFtaWNhbGx5IGNoYW5nZSBtYXRlcmlhbFxuICAgICAgICAgICAgbGV0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hQaHlzaWNhbE1hdGVyaWFsKHtcbiAgICAgICAgICAgICAgICBjb2xvcjogdGhpcy5ndWlDb25mLmNvbG9yLmNvbG9yLFxuICAgICAgICAgICAgICAgIGRlcHRoRnVuYzogZmFsc2UsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbWF0ZXJpYWwuY29sb3IuY29udmVydFNSR0JUb0xpbmVhcigpO1xuXG4gICAgICAgICAgICBtb2RlbC5zY2VuZS50cmF2ZXJzZSgob2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG9iamVjdC5pc01lc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LnBvc2l0aW9uLnkgPSAwLjE7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5jYXN0U2hhZG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0Lm1hdGVyaWFsLnNpZGUgPSAyO1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QubWF0ZXJpYWwuc2hhZG93U2lkZSA9IDE7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5tYXRlcmlhbC5tZXRhbG5lc3MgPSAwO1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QubWF0ZXJpYWwub3BhY2l0eSA9IHRoaXMuZ3VpQ29uZi5vcGFjaXR5Lm9wYWNpdHk7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5tYXRlcmlhbC5lbWlzc2l2ZS5zZXQodGhpcy5ndWlDb25mLmdsb3NzeS5lbWlzc2l2ZUNvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0Lm1hdGVyaWFsLmRlcHRoRnVuYyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QubWF0ZXJpYWwuY29sb3IuY29udmVydFNSR0JUb0xpbmVhcigpO1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlZmxlY3Rpb24gbWFwXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhdGggPSBgL3RocmVlLmpzLXBsYXlncm91bmQvc3RhdGljL2ltYWdlcy9tYXBzL2A7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hcFVybHMgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoICsgXCJwb3N4LmpwZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aCArIFwibmVneC5qcGdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggKyBcInBvc3kuanBnXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoICsgXCJuZWd5LmpwZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aCArIFwicG9zei5qcGdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggKyBcIm5lZ3ouanBnXCIsXG4gICAgICAgICAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3ViZU1hcCA9IG5ldyBUSFJFRS5DdWJlVGV4dHVyZUxvYWRlcigpLmxvYWQobWFwVXJscyk7XG4gICAgICAgICAgICAgICAgICAgIGN1YmVNYXAuZm9ybWF0ID0gVEhSRUUuUkdCRm9ybWF0O1xuICAgICAgICAgICAgICAgICAgICBjdWJlTWFwLmVuY29kaW5nID0gVEhSRUUuc1JHQkVuY29kaW5nO1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QubWF0ZXJpYWwuZW52TWFwID0gY3ViZU1hcDtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0Lm1hdGVyaWFsLm5lZWRzVXBkYXRlID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gc3RvcmUgbWF0ZXJpYWxcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5pdE1hdGVyaWFsID0gb2JqZWN0Lm1hdGVyaWFsO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGluaXRpYWwgbWF0ZXJpYWwgc2V0dXBcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ3VpQ29uZi5vcGFjaXR5LnRyYW5zcGFyZW50ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0Lm1hdGVyaWFsID0gbWF0ZXJpYWw7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QubWF0ZXJpYWwgPSBpbml0TWF0ZXJpYWw7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBpZiBpbml0aWFsIGdsYXNzIHN0YXRlIGlzIHRydWVcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ3VpQ29uZi5nbG9zc3kuZ2xhc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2xhc3NPcHRpb25zKG9iamVjdC5tYXRlcmlhbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmd1aVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENvbG9yKHRoaXMuZ3VpQ29uZi5jb2xvciwgXCJjb2xvclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKChjb2xvclZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0Lm1hdGVyaWFsLmNvbG9yLnNldChjb2xvclZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ3VpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkKHRoaXMuZ3VpQ29uZi5vcGFjaXR5LCBcInRyYW5zcGFyZW50XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QubWF0ZXJpYWwgPSBtYXRlcmlhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QubWF0ZXJpYWwgPSBpbml0TWF0ZXJpYWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ3VpQ29uZi5nbG9zc3kuZ2xhc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nbGFzc09wdGlvbnMob2JqZWN0Lm1hdGVyaWFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmd1aVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZCh0aGlzLmd1aUNvbmYub3BhY2l0eSwgXCJvcGFjaXR5XCIsIDAuMjUsIDAuNzUsIDAuMDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoKG9wYWNpdHlWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdC5tYXRlcmlhbC5vcGFjaXR5ID0gb3BhY2l0eVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ndWlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDb2xvcih0aGlzLmd1aUNvbmYuZ2xvc3N5LCBcImVtaXNzaXZlQ29sb3JcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZSgoY29sb3JWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdC5tYXRlcmlhbC5lbWlzc2l2ZS5zZXQoY29sb3JWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmd1aVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZCh0aGlzLmd1aUNvbmYuZ2xvc3N5LCBcImdsYXNzXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2xhc3NPcHRpb25zKG9iamVjdC5tYXRlcmlhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXR0ZU9wdGlvbnMob2JqZWN0Lm1hdGVyaWFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5zY2VuZS5hZGQobW9kZWwuc2NlbmUpO1xuICAgICAgICAgICAgdGhpcy5kaXJMaWdodC51cGRhdGVNYXRyaXgoKTtcbiAgICAgICAgICAgIHRoaXMuZGlyU3ViTGlnaHQudXBkYXRlTWF0cml4KCk7XG4gICAgICAgICAgICB0aGlzLmFtYmllbnRMaWdodC51cGRhdGVNYXRyaXgoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2xhc3NPcHRpb25zKG1hdGVyaWFsKSB7XG4gICAgICAgIG1hdGVyaWFsLnJlZnJhY3Rpb25SYXRpbyA9IDE7XG4gICAgICAgIG1hdGVyaWFsLnJlZmxlY3Rpdml0eSA9IDE7XG4gICAgICAgIG1hdGVyaWFsLnJvdWdobmVzcyA9IDA7XG4gICAgICAgIG1hdGVyaWFsLmNsZWFyY29hdCA9IDE7XG4gICAgICAgIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyA9IDA7XG4gICAgfVxuXG4gICAgbWF0dGVPcHRpb25zKG1hdGVyaWFsKSB7XG4gICAgICAgIG1hdGVyaWFsLnJlZnJhY3Rpb25SYXRpbyA9IDA7XG4gICAgICAgIG1hdGVyaWFsLnJlZmxlY3Rpdml0eSA9IDA7XG4gICAgICAgIG1hdGVyaWFsLnJvdWdobmVzcyA9IDAuNTtcbiAgICAgICAgbWF0ZXJpYWwuY2xlYXJjb2F0ID0gMDtcbiAgICAgICAgbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzID0gMC41O1xuICAgIH1cblxuICAgIG9uV2luZG93UmVzaXplKCkge1xuICAgICAgICB0aGlzLmNhbWVyYS5hc3BlY3QgPSB0aGlzLndpZHRoIC8gdGhpcy5oZWlnaHQ7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTaXplKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICB9XG5cbiAgICBhbmltYXRlKCkge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5hbmltYXRlKCkpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbmRlcih0aGlzLnNjZW5lLCB0aGlzLmNhbWVyYSk7XG4gICAgICAgIHRoaXMuY29udHJvbHMudXBkYXRlKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSBcInRocmVlXCI7XG5pbXBvcnQgQ29sb3JQaWNrZXIgZnJvbSBcInNpbXBsZS1jb2xvci1waWNrZXJcIjtcbmltcG9ydCBnc2FwIGZyb20gXCJnc2FwXCI7XG5cbmltcG9ydCB7IE9yYml0Q29udHJvbHMgfSBmcm9tIFwidGhyZWUvZXhhbXBsZXMvanNtL2NvbnRyb2xzL09yYml0Q29udHJvbHNcIjtcbmltcG9ydCB7IEdMVEZMb2FkZXIgfSBmcm9tIFwidGhyZWUvZXhhbXBsZXMvanNtL2xvYWRlcnMvR0xURkxvYWRlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHTFRGTW9kZWxDb250cm9sbGVyRW52aXJvbm1lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLkRPTSA9IHtcbiAgICAgICAgICAgIG1vZGVsQ29udGFpbmVyOiBcIi5qcy1tb2RlbC1jb250YWluZXItZW52aXJvbm1lbnRcIixcbiAgICAgICAgICAgIGRvd25sb2FkOiBcIi5qcy1kb3dubG9hZC1pbWFnZVwiLFxuXG4gICAgICAgICAgICAvLyBmaWx0ZXJzXG4gICAgICAgICAgICAvLyBjb2xvclxuICAgICAgICAgICAgY29sb3JXcmFwcGVyOiBcIi5qcy1jb2xvclwiLFxuICAgICAgICAgICAgY29sb3JJbnB1dDogXCIuanMtY29sb3ItaW5wdXRcIixcbiAgICAgICAgICAgIGNvbG9yUHJldmlldzogXCIuanMtY29sb3ItcHJldmlld1wiLFxuXG4gICAgICAgICAgICAvLyBvcGFjaXR5XG4gICAgICAgICAgICBvcGFjaXR5V3JhcHBlcjogXCIuanMtb3BhY2l0eVwiLFxuICAgICAgICAgICAgb3BhY2l0eUlucHV0OiBcIi5qcy1vcGFjaXR5LWlucHV0XCIsXG4gICAgICAgICAgICBvcGFjaXR5UHJldmlldzogXCIuanMtb3BhY2l0eS1wcmV2aWV3XCIsXG5cbiAgICAgICAgICAgIC8vIHRyYW5zcGFyZW50XG4gICAgICAgICAgICB0cmFuc3BhcmVudFdyYXBwZXI6IFwiLmpzLXRyYW5zcGFyZW50XCIsXG5cbiAgICAgICAgICAgIC8vIGZpbmlzaFxuICAgICAgICAgICAgZmluaXNoV3JhcHBlcjogXCIuanMtZmluaXNoXCIsXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gY29uZmlnXG4gICAgICAgIHRoaXMuY29uZmlnID0ge1xuICAgICAgICAgICAgbGlnaHQ6IHtcbiAgICAgICAgICAgICAgICBsaWdodEludGVuc2l0eTogNixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb2xvcjoge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBcIiMwMDA1YTBcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhdXRvUm90YXRpb246IHtcbiAgICAgICAgICAgICAgICBhdXRvUm90YXRlOiB0cnVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9wYWNpdHk6IHtcbiAgICAgICAgICAgICAgICB0cmFuc3BhcmVudDogZmFsc2UsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMC4zLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbmlzaDoge1xuICAgICAgICAgICAgICAgIGNsZWFyOiB0cnVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgICAgICAgICAgc2hvd0Vudmlyb25tZW50OiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBcIiMwMDA1YTBcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogbWFpbiBpbml0IC0gYWxsIGRvbSBlbGVtZW50cyBhbmQgbWV0aG9kIGNhbGxzXG4gICAgICovXG4gICAgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5tb2RlbENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5ET00ubW9kZWxDb250YWluZXIpO1xuICAgICAgICBpZiAodGhpcy5tb2RlbENvbnRhaW5lciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJHTFRGTW9kZWxDb250cm9sbGVyIGluaXQoKVwiKTtcblxuICAgICAgICAgICAgVEhSRUUuQ2FjaGUuZW5hYmxlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIHRoaXMuY29sb3JXcmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLkRPTS5jb2xvcldyYXBwZXIpO1xuICAgICAgICAgICAgdGhpcy5jb2xvcklucHV0ID0gdGhpcy5jb2xvcldyYXBwZXIucXVlcnlTZWxlY3Rvcih0aGlzLkRPTS5jb2xvcklucHV0KTtcbiAgICAgICAgICAgIHRoaXMuY29sb3JQcmV2aWV3ID0gdGhpcy5jb2xvcldyYXBwZXIucXVlcnlTZWxlY3Rvcih0aGlzLkRPTS5jb2xvclByZXZpZXcpO1xuXG4gICAgICAgICAgICB0aGlzLm9wYWNpdHlXcmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLkRPTS5vcGFjaXR5V3JhcHBlcik7XG4gICAgICAgICAgICB0aGlzLm9wYWNpdHlJbnB1dCA9IHRoaXMub3BhY2l0eVdyYXBwZXIucXVlcnlTZWxlY3Rvcih0aGlzLkRPTS5vcGFjaXR5SW5wdXQpO1xuICAgICAgICAgICAgdGhpcy5vcGFjaXR5UHJldmlldyA9IHRoaXMub3BhY2l0eVdyYXBwZXIucXVlcnlTZWxlY3Rvcih0aGlzLkRPTS5vcGFjaXR5UHJldmlldyk7XG5cbiAgICAgICAgICAgIHRoaXMudHJhbnNwYXJlbnRXcmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLkRPTS50cmFuc3BhcmVudFdyYXBwZXIpO1xuICAgICAgICAgICAgdGhpcy50cmFuc3BhcmVudElucHV0cyA9IHRoaXMudHJhbnNwYXJlbnRXcmFwcGVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFwiKTtcblxuICAgICAgICAgICAgLy8gcHJlc2V0IHRyYW5zcGFyZW5jeSByYWRpbyBidG5zXG4gICAgICAgICAgICB0aGlzLnRyYW5zcGFyZW50SW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnLm9wYWNpdHkudHJhbnNwYXJlbnQgJiYgaW5wdXQudmFsdWUgPT09IFwidHJhbnNwYXJlbnRcIikge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcGFjaXR5V3JhcHBlci5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmNvbmZpZy5vcGFjaXR5LnRyYW5zcGFyZW50ICYmIGlucHV0LnZhbHVlID09PSBcInRpbnRlZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LmNoZWNrZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wYWNpdHlXcmFwcGVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5maW5pc2hXcmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLkRPTS5maW5pc2hXcmFwcGVyKTtcbiAgICAgICAgICAgIHRoaXMuZmluaXNoSW5wdXRzID0gdGhpcy5maW5pc2hXcmFwcGVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFwiKTtcblxuICAgICAgICAgICAgLy8gcHJlc2V0IGZpbmlzaCByYWRpbyBidG5zXG4gICAgICAgICAgICB0aGlzLmZpbmlzaElucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5maW5pc2guY2xlYXIgJiYgaW5wdXQudmFsdWUgPT09IFwiY2xlYXJcIikge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmNvbmZpZy5maW5pc2guY2xlYXIgJiYgaW5wdXQudmFsdWUgPT09IFwibWF0dGVcIikge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5jb2xvclBpY2tlciA9IG5ldyBDb2xvclBpY2tlcigpO1xuICAgICAgICAgICAgdGhpcy5jb2xvclBpY2tlci5hcHBlbmRUbyh0aGlzLmNvbG9ySW5wdXQpO1xuXG4gICAgICAgICAgICAvLyBwcmVzZXQgY29sb3IgcGlja2VyXG4gICAgICAgICAgICB0aGlzLmNvbG9yUGlja2VyLnNldENvbG9yKHRoaXMuY29uZmlnLmNvbG9yLmNvbG9yKTtcblxuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMubW9kZWxDb250YWluZXIub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMubW9kZWxDb250YWluZXIub2Zmc2V0SGVpZ2h0O1xuXG4gICAgICAgICAgICB0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAvLyByZWZsZWN0aW9uIG1hcFxuICAgICAgICAgICAgY29uc3QgcGF0aCA9IGAvdGhyZWUuanMtcGxheWdyb3VuZC9zdGF0aWMvaW1hZ2VzL21hcHMvYDtcbiAgICAgICAgICAgIGNvbnN0IG1hcFVybHMgPSBbXG4gICAgICAgICAgICAgICAgcGF0aCArIFwicG9zeC5qcGdcIixcbiAgICAgICAgICAgICAgICBwYXRoICsgXCJuZWd4LmpwZ1wiLFxuICAgICAgICAgICAgICAgIHBhdGggKyBcInBvc3kuanBnXCIsXG4gICAgICAgICAgICAgICAgcGF0aCArIFwibmVneS5qcGdcIixcbiAgICAgICAgICAgICAgICBwYXRoICsgXCJwb3N6LmpwZ1wiLFxuICAgICAgICAgICAgICAgIHBhdGggKyBcIm5lZ3ouanBnXCIsXG4gICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICB0aGlzLmN1YmVNYXAgPSBuZXcgVEhSRUUuQ3ViZVRleHR1cmVMb2FkZXIoKS5sb2FkKG1hcFVybHMpO1xuICAgICAgICAgICAgdGhpcy5jdWJlTWFwLmZvcm1hdCA9IFRIUkVFLlJHQkZvcm1hdDtcbiAgICAgICAgICAgIHRoaXMuY3ViZU1hcC5lbmNvZGluZyA9IFRIUkVFLnNSR0JFbmNvZGluZztcblxuICAgICAgICAgICAgdGhpcy5pbml0Q2FtZXJhKCk7XG4gICAgICAgICAgICB0aGlzLmluaXRTY2VuZSgpO1xuICAgICAgICAgICAgdGhpcy5pbml0TGlnaHRzKCk7XG4gICAgICAgICAgICB0aGlzLmluaXRFbnZpcm9ubWVudCgpO1xuICAgICAgICAgICAgdGhpcy5pbml0UmVuZGVyZXIoKTtcbiAgICAgICAgICAgIHRoaXMuaW5pdENvbnRyb2xzKCk7XG4gICAgICAgICAgICB0aGlzLmluaXRNb2RlbCgpO1xuXG4gICAgICAgICAgICAvLyB0aGlzIHdpbGwgcmVtb3ZlIG1vZGVsIGFuZCBzdG9wIGFuaW1hdGlvbiBhbmQgYWZ0ZXIgM3Mgd2lsbCBjcmVhdGUgbmV3IG1vZGVsXG4gICAgICAgICAgICAvLyBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIC8vICAgICB0aGlzLmNsZWFyTW9kZWwoKTtcbiAgICAgICAgICAgIC8vIH0sIDMwMDApO1xuXG4gICAgICAgICAgICAvLyBoYW5kbGUgcmVzaXplXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCAoKSA9PiB0aGlzLm9uV2luZG93UmVzaXplKCksIGZhbHNlKTtcblxuICAgICAgICAgICAgdGhpcy5kb3dubG9hZEFuY2hvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5ET00uZG93bmxvYWQpO1xuICAgICAgICAgICAgdGhpcy5kb3dubG9hZEFuY2hvci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2KSA9PiB7XG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNhdmVJbWFnZShldi5jdXJyZW50VGFyZ2V0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY2FtZXJhIHNldHVwXG4gICAgICovXG4gICAgaW5pdENhbWVyYSgpIHtcbiAgICAgICAgdGhpcy5jYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoXG4gICAgICAgICAgICAzNSxcbiAgICAgICAgICAgIHRoaXMud2lkdGggLyB0aGlzLmhlaWdodCxcbiAgICAgICAgICAgIDAuNSxcbiAgICAgICAgICAgIDYwMCxcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5jYW1lcmEucG9zaXRpb24uc2V0KDEwLCAxMCwgNDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNjZW5lIHNldHVwXG4gICAgICovXG4gICAgaW5pdFNjZW5lKCkge1xuICAgICAgICB0aGlzLnNjZW5lID0gbmV3IFRIUkVFLlNjZW5lKCk7XG4gICAgICAgIHRoaXMuc2NlbmUuYmFja2dyb3VuZCA9IG5ldyBUSFJFRS5Db2xvcigweGZmZmZmZik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogbGlnaHRzIHNldHVwIC0gYmVjYXVzZSBvZiBwZXJmb3JtYW5jZSA+IGFsbCBpbiBvbmUgb2JqZWN0XG4gICAgICovXG4gICAgaW5pdExpZ2h0cygpIHtcbiAgICAgICAgY29uc3QgbGlnaHRXcmFwcGVyID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG4gICAgICAgIGNvbnN0IGhlbWlMaWdodCA9IG5ldyBUSFJFRS5IZW1pc3BoZXJlTGlnaHQoMHhmZmZmZmYsIDB4OTk5OTk5KTtcbiAgICAgICAgaGVtaUxpZ2h0LnBvc2l0aW9uLnNldCgwLCAyMDAsIDApO1xuICAgICAgICBsaWdodFdyYXBwZXIuYWRkKGhlbWlMaWdodCk7XG5cbiAgICAgICAgdGhpcy5hbWJpZW50TGlnaHQgPSBuZXcgVEhSRUUuQW1iaWVudExpZ2h0KDB4NDA0MDQwKTtcbiAgICAgICAgdGhpcy5hbWJpZW50TGlnaHQubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuICAgICAgICBsaWdodFdyYXBwZXIuYWRkKHRoaXMuYW1iaWVudExpZ2h0KTtcblxuICAgICAgICAvLyB0aGlzIGlzIGp1c3QgYmFjayBsaWdodCAtIHdpdGhvdXQgaXQgYmFjayBzaWRlIG9mIG1vZGVsIHdvdWxkIGJlIGJhcmVseSB2aXNpYmxlXG4gICAgICAgIHRoaXMuZGlyU3ViTGlnaHQgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCgweGNjY2NjYywgMyk7XG4gICAgICAgIHRoaXMuZGlyU3ViTGlnaHQucG9zaXRpb24uc2V0KC0yMCwgMjAsIC0yMCk7XG4gICAgICAgIHRoaXMuZGlyU3ViTGlnaHQubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuICAgICAgICBsaWdodFdyYXBwZXIuYWRkKHRoaXMuZGlyU3ViTGlnaHQpO1xuXG4gICAgICAgIHRoaXMuZGlyTGlnaHQgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCgweGRkZGRkZCwgdGhpcy5jb25maWcubGlnaHQubGlnaHRJbnRlbnNpdHkpO1xuICAgICAgICB0aGlzLmRpckxpZ2h0LnBvc2l0aW9uLnNldCgyMCwgMzAsIDEwKTtcbiAgICAgICAgdGhpcy5kaXJMaWdodC5jYXN0U2hhZG93ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kaXJMaWdodC5zaGFkb3cuY2FtZXJhLnRvcCA9IDE4MDtcbiAgICAgICAgdGhpcy5kaXJMaWdodC5zaGFkb3cuY2FtZXJhLmJvdHRvbSA9IC0xMDA7XG4gICAgICAgIHRoaXMuZGlyTGlnaHQuc2hhZG93LmNhbWVyYS5sZWZ0ID0gLTEyMDtcbiAgICAgICAgdGhpcy5kaXJMaWdodC5zaGFkb3cuY2FtZXJhLnJpZ2h0ID0gMTIwO1xuICAgICAgICB0aGlzLmRpckxpZ2h0LnNoYWRvdy5tYXBTaXplLndpZHRoID0gNDA5NjtcbiAgICAgICAgdGhpcy5kaXJMaWdodC5zaGFkb3cubWFwU2l6ZS5oZWlnaHQgPSA0MDk2O1xuICAgICAgICB0aGlzLmRpckxpZ2h0Lm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kaXJMaWdodC5zaGFkb3cucmFkaXVzID0gNDtcbiAgICAgICAgdGhpcy5kaXJMaWdodC5zaGFkb3cuYmlhcyA9IDAuMDAwMTtcbiAgICAgICAgbGlnaHRXcmFwcGVyLmFkZCh0aGlzLmRpckxpZ2h0KTtcbiAgICAgICAgdGhpcy5zY2VuZS5hZGQobGlnaHRXcmFwcGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBlbnZpcm9ubWVudCBzZXR1cCAtIGJveCBnZW9tZXRyeVxuICAgICAqL1xuICAgIGluaXRFbnZpcm9ubWVudCgpIHtcbiAgICAgICAgdGhpcy5lbnZpcm9ubWVudCA9IG5ldyBUSFJFRS5NZXNoKFxuICAgICAgICAgICAgbmV3IFRIUkVFLkJveEJ1ZmZlckdlb21ldHJ5KDEwMCwgMTAwLCAxMDApLFxuICAgICAgICAgICAgbmV3IFRIUkVFLk1lc2hTdGFuZGFyZE1hdGVyaWFsKHtcbiAgICAgICAgICAgICAgICBkZXB0aFdyaXRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZWZyYWN0aW9uUmF0aW86IDAsXG4gICAgICAgICAgICAgICAgcm91Z2huZXNzOiAxLFxuICAgICAgICAgICAgICAgIHNpZGU6IFRIUkVFLkJhY2tTaWRlLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5lbnZpcm9ubWVudC5wb3NpdGlvbi55ID0gNTA7XG4gICAgICAgIHRoaXMuZW52aXJvbm1lbnQucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG4gICAgICAgIHRoaXMuZW52aXJvbm1lbnQubWF0ZXJpYWwuY29sb3Iuc2V0KHRoaXMuY29uZmlnLmVudmlyb25tZW50LmNvbG9yKTtcbiAgICAgICAgdGhpcy5zY2VuZS5hZGQodGhpcy5lbnZpcm9ubWVudCk7XG5cbiAgICAgICAgaWYgKCF0aGlzLmNvbmZpZy5lbnZpcm9ubWVudC5zaG93RW52aXJvbm1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZW52aXJvbm1lbnQudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcmVuZGVyZXIgc2V0dXBcbiAgICAgKi9cbiAgICBpbml0UmVuZGVyZXIoKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgVEhSRUUuV2ViR0xSZW5kZXJlcih7XG4gICAgICAgICAgICBhbnRpYWxpYXM6IHRydWUsXG4gICAgICAgICAgICBkZXB0aDogZmFsc2UsXG4gICAgICAgICAgICBwb3dlclByZWZlcmVuY2U6IFwiaGlnaC1wZXJmb3JtYW5jZVwiLFxuICAgICAgICAgICAgcHJlc2VydmVEcmF3aW5nQnVmZmVyOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRQaXhlbFJhdGlvKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTaXplKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zaGFkb3dNYXAuZW5hYmxlZCA9IHRydWU7XG4gICAgICAgIC8vIHRoaXMucmVuZGVyZXIuZ2FtbWFGYWN0b3IgPSAyLjI7XG4gICAgICAgIHRoaXMucmVuZGVyZXIub3V0cHV0RW5jb2RpbmcgPSBUSFJFRS5zUkdCRW5jb2Rpbmc7XG4gICAgICAgIHRoaXMucmVuZGVyZXIucGh5c2ljYWxseUNvcnJlY3RMaWdodHMgPSB0cnVlO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNoYWRvd01hcC50eXBlID0gVEhSRUUuUENGU2hhZG93TWFwO1xuICAgICAgICB0aGlzLm1vZGVsQ29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMucmVuZGVyZXIuZG9tRWxlbWVudCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogb3JiaXQgY29udHJvbHMgc2V0dXBcbiAgICAgKi9cbiAgICBpbml0Q29udHJvbHMoKSB7XG4gICAgICAgIHRoaXMuY29udHJvbHMgPSBuZXcgT3JiaXRDb250cm9scyhcbiAgICAgICAgICAgIHRoaXMuY2FtZXJhLFxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5kb21FbGVtZW50LFxuICAgICAgICApO1xuICAgICAgICB0aGlzLmNvbnRyb2xzLnRhcmdldC5zZXQoMCwgMTAsIDApO1xuICAgICAgICB0aGlzLmNvbnRyb2xzLmF1dG9Sb3RhdGUgPSB0aGlzLmNvbmZpZy5hdXRvUm90YXRpb24uYXV0b1JvdGF0ZTtcbiAgICAgICAgdGhpcy5jb250cm9scy5hdXRvUm90YXRlU3BlZWQgPSAxO1xuICAgICAgICB0aGlzLmNvbnRyb2xzLmVuYWJsZVpvb20gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb250cm9scy5lbmFibGVQYW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb250cm9scy5lbmFibGVEYW1waW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jb250cm9scy5kYW1waW5nRmFjdG9yID0gMC4xO1xuXG4gICAgICAgIHRoaXMuY29udHJvbHMubWF4UG9sYXJBbmdsZSA9IE1hdGguUEkgLyAxLjg7XG4gICAgICAgIHRoaXMuY29udHJvbHMubWluUG9sYXJBbmdsZSA9IE1hdGguUEkgLyAzLjU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogbW9kZWwgc2V0dXAgYW5kIGxvYWQgY2FsbFxuICAgICAqL1xuICAgIGluaXRNb2RlbCgpIHtcbiAgICAgICAgdGhpcy5pc1BsYXlpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmFuaW1hdGUoKTtcblxuICAgICAgICAvLyBnZXQgbW9kZWxcbiAgICAgICAgbGV0IG1vZGVsID0gdGhpcy5tb2RlbENvbnRhaW5lci5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1vZGVsLXNvdXJjZVwiKTtcblxuICAgICAgICAvLyBsb2FkZXJcbiAgICAgICAgY29uc3QgbG9hZGVyID0gbmV3IEdMVEZMb2FkZXIoKTtcbiAgICAgICAgdGhpcy5tb2RlbCA9IG51bGw7XG4gICAgICAgIGxvYWRlci5sb2FkKG1vZGVsLCAobW9kZWwpID0+IHtcbiAgICAgICAgICAgIG1vZGVsLnNjZW5lLnRyYXZlcnNlKChvYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRNb2RlbChvYmplY3QpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLm1vZGVsID0gbW9kZWwuc2NlbmU7XG5cbiAgICAgICAgICAgIG1vZGVsLnNjZW5lLm5hbWUgPSBcIjNkLW1vZGVsXCI7XG5cbiAgICAgICAgICAgIHRoaXMuc2NlbmUuYWRkKG1vZGVsLnNjZW5lKTtcbiAgICAgICAgICAgIHRoaXMuZGlyTGlnaHQudXBkYXRlTWF0cml4KCk7XG4gICAgICAgICAgICB0aGlzLmRpclN1YkxpZ2h0LnVwZGF0ZU1hdHJpeCgpO1xuICAgICAgICAgICAgdGhpcy5hbWJpZW50TGlnaHQudXBkYXRlTWF0cml4KCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIG1vYWRlbCBsb2FkaW5nIGFuZCBjb250cm9sbGVyIGNhbGxcbiAgICAgKiBAcGFyYW0gW29iamVjdF0gb2JqZWN0XG4gICAgICovXG4gICAgbG9hZE1vZGVsKG9iamVjdCkge1xuICAgICAgICBpZiAob2JqZWN0LmlzTWVzaCkge1xuICAgICAgICAgICAgb2JqZWN0LnBvc2l0aW9uLnkgPSAwLjE7XG4gICAgICAgICAgICBvYmplY3QuY2FzdFNoYWRvdyA9IHRydWU7XG4gICAgICAgICAgICBvYmplY3QubWF0ZXJpYWwuc2lkZSA9IDI7XG4gICAgICAgICAgICBvYmplY3QubWF0ZXJpYWwuc2hhZG93U2lkZSA9IDE7XG4gICAgICAgICAgICBvYmplY3QubWF0ZXJpYWwubWV0YWxuZXNzID0gMDtcbiAgICAgICAgICAgIG9iamVjdC5tYXRlcmlhbC5vcGFjaXR5ID0gdGhpcy5jb25maWcub3BhY2l0eS5vcGFjaXR5O1xuICAgICAgICAgICAgb2JqZWN0Lm1hdGVyaWFsLmRlcHRoRnVuYyA9IGZhbHNlO1xuICAgICAgICAgICAgb2JqZWN0Lm1hdGVyaWFsLmRlcHRoV3JpdGUgPSAhdGhpcy5jb25maWcub3BhY2l0eS50cmFuc3BhcmVudDtcbiAgICAgICAgICAgIG9iamVjdC5tYXRlcmlhbC50cmFuc3BhcmVudCA9IHRoaXMuY29uZmlnLm9wYWNpdHkudHJhbnNwYXJlbnQ7XG4gICAgICAgICAgICBvYmplY3QubWF0ZXJpYWwuY29sb3Iuc2V0KHRoaXMuY29sb3JQaWNrZXIuZ2V0SGV4TnVtYmVyKCkpO1xuICAgICAgICAgICAgb2JqZWN0Lm1hdGVyaWFsLmNvbG9yLmNvbnZlcnRTUkdCVG9MaW5lYXIoKTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLmNvbmZpZy5vcGFjaXR5LnRyYW5zcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0Lm1hdGVyaWFsLnNpZGUgPSBudWxsO1xuICAgICAgICAgICAgICAgIG9iamVjdC5tYXRlcmlhbC5zaGFkb3dTaWRlID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb2JqZWN0Lm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIG9iamVjdC5tYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5jb25maWcub3BhY2l0eS50cmFuc3BhcmVudCkge1xuICAgICAgICAgICAgICAgIG9iamVjdC5tYXRlcmlhbC5lbnZNYXAgPSB0aGlzLmN1YmVNYXA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlmIGluaXRpYWwgZ2xhc3Mgc3RhdGUgaXMgdHJ1ZVxuICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnLmZpbmlzaC5jbGVhcikge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJPcHRpb25zKG9iamVjdC5tYXRlcmlhbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZmlsdGVyc0NvbnRyb2xsZXIob2JqZWN0KTtcblxuICAgICAgICAgICAgdGhpcy5yZXZlYWxBbmltYXRpb24ob2JqZWN0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldmVhbEFuaW1hdGlvbihvYmplY3QpIHtcbiAgICAgICAgb2JqZWN0LnNjYWxlLnNldCgwLjAwMSwgMC4wMDEsIDAuMDAxKTtcbiAgICAgICAgb2JqZWN0LnJvdGF0aW9uLnkgPSAtNC41O1xuICAgICAgICBvYmplY3QudXBkYXRlTWF0cml4KCk7XG5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBnc2FwLnRvKG9iamVjdC5yb3RhdGlvbiwge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAxLFxuICAgICAgICAgICAgICAgIGVhc2U6IFwicG93ZXIzLm91dFwiLFxuICAgICAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZ3NhcC50byhvYmplY3Quc2NhbGUsIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMSxcbiAgICAgICAgICAgICAgICBlYXNlOiBcImVsYXN0aWMub3V0KDEsIDAuNSlcIixcbiAgICAgICAgICAgICAgICB4OiAxLFxuICAgICAgICAgICAgICAgIHk6IDEsXG4gICAgICAgICAgICAgICAgejogMSxcbiAgICAgICAgICAgICAgICBvblVwZGF0ZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QudXBkYXRlTWF0cml4KCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCA2MDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGZpbHRlcnMgY29udHJvbGxlclxuICAgICAqIEBwYXJhbSBbb2JqZWN0XSBvYmplY3RcbiAgICAgKi9cbiAgICBmaWx0ZXJzQ29udHJvbGxlcihvYmplY3QpIHtcbiAgICAgICAgLy8gY29sb3IgY2hhbmdlXG4gICAgICAgIHRoaXMuY29sb3JQaWNrZXIub25DaGFuZ2UoKCkgPT4ge1xuICAgICAgICAgICAgb2JqZWN0Lm1hdGVyaWFsLmNvbG9yLnNldCh0aGlzLmNvbG9yUGlja2VyLmdldEhleE51bWJlcigpKTtcbiAgICAgICAgICAgIHRoaXMuY29sb3JQcmV2aWV3LmlubmVySFRNTCA9IHRoaXMuY29sb3JQaWNrZXIuZ2V0SGV4U3RyaW5nKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIG9wYWNpdHkgY2hhbmdlXG4gICAgICAgIHRoaXMub3BhY2l0eUlucHV0LnZhbHVlID0gdGhpcy5jb25maWcub3BhY2l0eS5vcGFjaXR5ICogMTAwO1xuICAgICAgICB0aGlzLm9wYWNpdHlJbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgb2JqZWN0Lm1hdGVyaWFsLm9wYWNpdHkgPSB0aGlzLm9wYWNpdHlJbnB1dC52YWx1ZSAvIDEwMDtcbiAgICAgICAgICAgIHRoaXMub3BhY2l0eVByZXZpZXcuaW5uZXJIVE1MID0gYCR7dGhpcy5vcGFjaXR5SW5wdXQudmFsdWV9JWA7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHRyYW5zcGFyZW5jeSBjaGFuZ2VcbiAgICAgICAgdGhpcy50cmFuc3BhcmVudElucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgb2JqZWN0Lm1hdGVyaWFsLnRyYW5zcGFyZW50ID0gaW5wdXQudmFsdWUgPT09IFwidHJhbnNwYXJlbnRcIjtcbiAgICAgICAgICAgICAgICBvYmplY3QubWF0ZXJpYWwuZGVwdGhXcml0ZSA9IGlucHV0LnZhbHVlICE9PSBcInRyYW5zcGFyZW50XCI7XG4gICAgICAgICAgICAgICAgdGhpcy5vcGFjaXR5V3JhcHBlci5zdHlsZS5kaXNwbGF5ID0gaW5wdXQudmFsdWUgPT09IFwidHJhbnNwYXJlbnRcIiA/IFwiXCIgOiBcIm5vbmVcIjtcblxuICAgICAgICAgICAgICAgIG9iamVjdC5tYXRlcmlhbC5lbnZNYXAgPSBpbnB1dC52YWx1ZSAhPT0gXCJ0cmFuc3BhcmVudFwiID8gbnVsbCA6IHRoaXMuY3ViZU1hcDtcbiAgICAgICAgICAgICAgICBvYmplY3QubWF0ZXJpYWwuc2lkZSA9IGlucHV0LnZhbHVlICE9PSBcInRyYW5zcGFyZW50XCIgPyBudWxsIDogMjtcbiAgICAgICAgICAgICAgICBvYmplY3QubWF0ZXJpYWwuc2hhZG93U2lkZSA9IGlucHV0LnZhbHVlICE9PSBcInRyYW5zcGFyZW50XCIgPyBudWxsIDogMTtcblxuICAgICAgICAgICAgICAgIG9iamVjdC5tYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gZmluaXNoIGNoYW5nZVxuICAgICAgICB0aGlzLmZpbmlzaElucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LnZhbHVlID09PSBcImNsZWFyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhck9wdGlvbnMob2JqZWN0Lm1hdGVyaWFsKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdHRlT3B0aW9ucyhvYmplY3QubWF0ZXJpYWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBmaW5pc2ggY2xlYXIgbWV0aG9kXG4gICAgICogQHBhcmFtIG1hdGVyaWFsXG4gICAgICovXG4gICAgY2xlYXJPcHRpb25zKG1hdGVyaWFsKSB7XG4gICAgICAgIG1hdGVyaWFsLnJlZnJhY3Rpb25SYXRpbyA9IDE7XG4gICAgICAgIG1hdGVyaWFsLnJlZmxlY3Rpdml0eSA9IDE7XG4gICAgICAgIG1hdGVyaWFsLnJvdWdobmVzcyA9IDA7XG4gICAgICAgIG1hdGVyaWFsLmNsZWFyY29hdCA9IDE7XG4gICAgICAgIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZmluaXNoIG1hdHRlIG1ldGhvZFxuICAgICAqIEBwYXJhbSBtYXRlcmlhbFxuICAgICAqL1xuICAgIG1hdHRlT3B0aW9ucyhtYXRlcmlhbCkge1xuICAgICAgICBtYXRlcmlhbC5yZWZyYWN0aW9uUmF0aW8gPSAwO1xuICAgICAgICBtYXRlcmlhbC5yZWZsZWN0aXZpdHkgPSAwO1xuICAgICAgICBtYXRlcmlhbC5yb3VnaG5lc3MgPSAwLjU7XG4gICAgICAgIG1hdGVyaWFsLmNsZWFyY29hdCA9IDA7XG4gICAgICAgIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyA9IDAuNTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIG9uV2luZG93UmVzaXplKCkge1xuICAgICAgICB0aGlzLmNhbWVyYS5hc3BlY3QgPSB0aGlzLm1vZGVsQ29udGFpbmVyLm9mZnNldFdpZHRoIC8gdGhpcy5tb2RlbENvbnRhaW5lci5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIHRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFNpemUodGhpcy5tb2RlbENvbnRhaW5lci5vZmZzZXRXaWR0aCwgdGhpcy5tb2RlbENvbnRhaW5lci5vZmZzZXRIZWlnaHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgICAqL1xuICAgIGFuaW1hdGUoKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVuZGVyKHRoaXMuc2NlbmUsIHRoaXMuY2FtZXJhKTtcbiAgICAgICAgdGhpcy5jb250cm9scy51cGRhdGUoKTtcbiAgICAgICAgaWYgKHRoaXMucmVuZGVyZXIgIT0gbnVsbCAmJiB0aGlzLmlzUGxheWluZykge1xuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMuYW5pbWF0ZSgpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHdpbGwgcmVtb3ZlIG1vZGVsIGZyb20gc2NlbmUgYW5kIGNsZWFyIGFsbCBwcm9wc1xuICAgICAqL1xuICAgIGNsZWFyTW9kZWwoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuc2NlbmUpO1xuICAgICAgICB0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNjZW5lLnJlbW92ZSh0aGlzLm1vZGVsKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5yZW5kZXIodGhpcy5zY2VuZSwgdGhpcy5jYW1lcmEpO1xuICAgICAgICB0aGlzLnJlc2V0RmlsdGVycygpO1xuXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5pbml0TW9kZWwoKTtcblxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhck1vZGVsKCk7XG4gICAgICAgICAgICB9LCA1MDAwKTtcbiAgICAgICAgfSwgMzAwMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogd2lsbCByZXNldCBjb25maWd1cmF0b3IgZmlsdGVyc1xuICAgICAqL1xuICAgIHJlc2V0RmlsdGVycygpIHtcbiAgICAgICAgLy8gcmVzZXQgdHJhbnNwYXJlbmN5IHJhZGlvIGJ0bnNcbiAgICAgICAgdGhpcy50cmFuc3BhcmVudElucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnLm9wYWNpdHkudHJhbnNwYXJlbnQgJiYgaW5wdXQudmFsdWUgPT09IFwidHJhbnNwYXJlbnRcIikge1xuICAgICAgICAgICAgICAgIGlucHV0LmNoZWNrZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMub3BhY2l0eVdyYXBwZXIuc3R5bGUuZGlzcGxheSA9IFwiXCI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmNvbmZpZy5vcGFjaXR5LnRyYW5zcGFyZW50ICYmIGlucHV0LnZhbHVlID09PSBcInRpbnRlZFwiKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5vcGFjaXR5V3JhcHBlci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHJlc2V0IGZpbmlzaCByYWRpbyBidG5zXG4gICAgICAgIHRoaXMuZmluaXNoSW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb25maWcuZmluaXNoLmNsZWFyICYmIGlucHV0LnZhbHVlID09PSBcImNsZWFyXCIpIHtcbiAgICAgICAgICAgICAgICBpbnB1dC5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuY29uZmlnLmZpbmlzaC5jbGVhciAmJiBpbnB1dC52YWx1ZSA9PT0gXCJtYXR0ZVwiKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHJlc2V0IGNvbG9yIHBpY2tlclxuICAgICAgICB0aGlzLmNvbG9yUGlja2VyLnNldENvbG9yKHRoaXMuY29uZmlnLmNvbG9yLmNvbG9yKTtcblxuICAgICAgICAvLyByZXNldCBkb3dubG9hZCBidG5cbiAgICAgICAgdGhpcy5kb3dubG9hZEFuY2hvci5kYXRhc2V0LmVtcHR5ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIHNhdmVJbWFnZShhbmNob3IpIHtcbiAgICAgICAgaWYgKGFuY2hvciA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdHJEb3dubG9hZE1pbWUgPSBcImltYWdlL29jdGV0LXN0cmVhbVwiO1xuICAgICAgICBjb25zdCBzdHJNaW1lID0gXCJpbWFnZS9qcGVnXCI7XG4gICAgICAgIGNvbnN0IGltZ0RhdGEgPSB0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQudG9EYXRhVVJMKHN0ck1pbWUpO1xuICAgICAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGluayk7XG4gICAgICAgIGxpbmsuZG93bmxvYWQgPSBcIm1vZGVsLXByZXZpZXcuanBnXCI7XG4gICAgICAgIGxpbmsuaHJlZiA9IGltZ0RhdGEucmVwbGFjZShzdHJNaW1lLCBzdHJEb3dubG9hZE1pbWUpO1xuICAgICAgICBsaW5rLmNsaWNrKCk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobGluayk7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSBcInRocmVlXCI7XG5pbXBvcnQgKiBhcyBkYXQgZnJvbSBcImRhdC5ndWlcIjtcblxuaW1wb3J0IHsgT3JiaXRDb250cm9scyB9IGZyb20gXCJ0aHJlZS9leGFtcGxlcy9qc20vY29udHJvbHMvT3JiaXRDb250cm9sc1wiO1xuaW1wb3J0IHsgR0xURkxvYWRlciB9IGZyb20gXCJ0aHJlZS9leGFtcGxlcy9qc20vbG9hZGVycy9HTFRGTG9hZGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdMVEZNb2RlbENvbnRyb2xsZXJTaGFkZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLkRPTSA9IHtcbiAgICAgICAgICAgIG1vZGVsQ29udGFpbmVyOiBcIi5qcy1tb2RlbC1jb250YWluZXItc2hhZGVyXCIsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5tb2RlbENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5ET00ubW9kZWxDb250YWluZXIpO1xuICAgICAgICBpZiAodGhpcy5tb2RlbENvbnRhaW5lciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJHTFRGTW9kZWxDb250cm9sbGVyU2hhZGVyIGluaXQoKVwiKTtcblxuICAgICAgICAgICAgVEhSRUUuQ2FjaGUuZW5hYmxlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIHRoaXMuZ3VpID0gbmV3IGRhdC5HVUkoe1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQm90dGxlIGNvbmZpZ1wiLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuZ3VpQ29uZiA9IHtcbiAgICAgICAgICAgICAgICBhdXRvUm90YXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgYXV0b1JvdGF0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5pbml0RkJYTW9kZWwoKTtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaW5pdEZCWE1vZGVsKCkge1xuICAgICAgICAvLyBlbnZpcm9ubWVudFxuICAgICAgICBjb25zdCBwYXRoID1cbiAgICAgICAgICAgIFwiaHR0cHM6Ly9zMy11cy13ZXN0LTIuYW1hem9uYXdzLmNvbS9zLmNkcG4uaW8vMTE0Nzg3Ny93aW50ZXItaGRyaV9cIjtcbiAgICAgICAgY29uc3QgZm9ybWF0ID0gXCIucG5nXCI7XG4gICAgICAgIGNvbnN0IG9yZGVyID0gW1wicHhcIiwgXCJueFwiLCBcInB5XCIsIFwibnlcIiwgXCJwelwiLCBcIm56XCJdO1xuICAgICAgICBjb25zdCB1cmxzID0gW107XG4gICAgICAgIG9yZGVyLmZvckVhY2goc2lkZSA9PiB7XG4gICAgICAgICAgICB1cmxzLnB1c2goYCR7cGF0aH0ke3NpZGV9JHtmb3JtYXR9YCk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB0ZXh0dXJlQ3ViZSA9IG5ldyBUSFJFRS5DdWJlVGV4dHVyZUxvYWRlcigpLmxvYWQodXJscyk7XG4gICAgICAgIHRleHR1cmVDdWJlLmZvcm1hdCA9IFRIUkVFLlJHQkZvcm1hdDtcblxuICAgICAgICAvLyBjYW1lcmFcbiAgICAgICAgdGhpcy5jYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoXG4gICAgICAgICAgICAzNSxcbiAgICAgICAgICAgIHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0LFxuICAgICAgICAgICAgMC41LFxuICAgICAgICAgICAgMTAwMCxcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5jYW1lcmEucG9zaXRpb24uc2V0KDQ4LCAyMCwgMzIpO1xuXG4gICAgICAgIC8vIHNjZW5lXG4gICAgICAgIHRoaXMuc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcbiAgICAgICAgdGhpcy5zY2VuZS5iYWNrZ3JvdW5kID0gdGV4dHVyZUN1YmU7XG4gICAgICAgIHRoaXMuc2NlbmUubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG4gICAgICAgIC8vIHNoYWRlcnMgY29uZmlnXG4gICAgICAgIGNvbnN0IHNoYWRlciA9IHtcbiAgICAgICAgICAgIHVuaWZvcm1zOiB7XG4gICAgICAgICAgICAgICAgbVJlZnJhY3Rpb25SYXRpbzogeyB2YWx1ZTogMS4wMiB9LFxuICAgICAgICAgICAgICAgIG1GcmVzbmVsQmlhczogeyB2YWx1ZTogMC4xIH0sXG4gICAgICAgICAgICAgICAgbUZyZXNuZWxQb3dlcjogeyB2YWx1ZTogMi4wIH0sXG4gICAgICAgICAgICAgICAgbUZyZXNuZWxTY2FsZTogeyB2YWx1ZTogMS4wIH0sXG4gICAgICAgICAgICAgICAgdEN1YmU6IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2ZXJ0ZXhTaGFkZXI6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc2hhZGVyLXZlcnRleFwiKS50ZXh0Q29udGVudCxcbiAgICAgICAgICAgIGZyYWdtZW50U2hhZGVyOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3NoYWRlci1mcmFnbWVudFwiKS50ZXh0Q29udGVudCxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCB1bmlmb3JtcyA9IFRIUkVFLlVuaWZvcm1zVXRpbHMuY2xvbmUoc2hhZGVyLnVuaWZvcm1zKTtcblxuICAgICAgICB1bmlmb3Jtc1tcInRDdWJlXCJdLnZhbHVlID0gdGV4dHVyZUN1YmU7XG5cbiAgICAgICAgLy8gZ2xhc3MgbWF0ZXJpYWxcbiAgICAgICAgY29uc3QgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuU2hhZGVyTWF0ZXJpYWwoe1xuICAgICAgICAgICAgdW5pZm9ybXMsXG4gICAgICAgICAgICB2ZXJ0ZXhTaGFkZXI6IHNoYWRlci52ZXJ0ZXhTaGFkZXIsXG4gICAgICAgICAgICBmcmFnbWVudFNoYWRlcjogc2hhZGVyLmZyYWdtZW50U2hhZGVyLFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBnZXQgbW9kZWxcbiAgICAgICAgbGV0IG1vZGVsID0gdGhpcy5tb2RlbENvbnRhaW5lci5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1vZGVsLXNvdXJjZVwiKTtcblxuICAgICAgICAvLyBsb2FkZXJcbiAgICAgICAgY29uc3QgbG9hZGVyID0gbmV3IEdMVEZMb2FkZXIoKTtcbiAgICAgICAgbG9hZGVyLmxvYWQobW9kZWwsIChtb2RlbCkgPT4ge1xuICAgICAgICAgICAgbW9kZWwuc2NlbmUudHJhdmVyc2UoKG9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChvYmplY3QuaXNNZXNoKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5wb3NpdGlvbi55ID0gMC4xO1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QubWF0ZXJpYWwgPSBtYXRlcmlhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5zY2VuZS5hZGQobW9kZWwuc2NlbmUpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyByZW5kZXJlclxuICAgICAgICB0aGlzLnJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoeyBhbnRpYWxpYXM6IHRydWUgfSk7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0UGl4ZWxSYXRpbyh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zaGFkb3dNYXAuZW5hYmxlZCA9IHRydWU7XG4gICAgICAgIHRoaXMubW9kZWxDb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5yZW5kZXJlci5kb21FbGVtZW50KTtcblxuICAgICAgICAvLyBvcmJpdCBjb250cm9sc1xuICAgICAgICB0aGlzLmNvbnRyb2xzID0gbmV3IE9yYml0Q29udHJvbHMoXG4gICAgICAgICAgICB0aGlzLmNhbWVyYSxcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuZG9tRWxlbWVudCxcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5jb250cm9scy50YXJnZXQuc2V0KDAsIDEwLCAwKTtcbiAgICAgICAgdGhpcy5jb250cm9scy5hdXRvUm90YXRlID0gdGhpcy5ndWlDb25mLmF1dG9Sb3RhdGlvbi5hdXRvUm90YXRlO1xuICAgICAgICB0aGlzLmNvbnRyb2xzLmF1dG9Sb3RhdGVTcGVlZCA9IDE7XG5cbiAgICAgICAgdGhpcy5ndWlcbiAgICAgICAgICAgIC5hZGQodGhpcy5ndWlDb25mLmF1dG9Sb3RhdGlvbiwgXCJhdXRvUm90YXRlXCIpXG4gICAgICAgICAgICAub25DaGFuZ2UoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9scy5hdXRvUm90YXRlID0gdmFsdWUgIT09IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gaGFuZGxlIHJlc2l6ZVxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCAoKSA9PiB0aGlzLm9uV2luZG93UmVzaXplKCksIGZhbHNlKTtcbiAgICB9XG5cbiAgICBvbldpbmRvd1Jlc2l6ZSgpIHtcbiAgICAgICAgdGhpcy5jYW1lcmEuYXNwZWN0ID0gd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICAgIHRoaXMuY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTaXplKHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xuICAgIH1cblxuICAgIGFuaW1hdGUoKSB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLmFuaW1hdGUoKSk7XG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVuZGVyKHRoaXMuc2NlbmUsIHRoaXMuY2FtZXJhKTtcbiAgICAgICAgdGhpcy5jb250cm9scy51cGRhdGUoKTtcbiAgICB9XG59XG4iLCIvKipcbiAqIFwic21hcnRcIiBuYXZpZ2F0aW9uIHdoaWNoIGdvZXMgb2ZmIHNjcmVlbiB3aGVuIHNjcm9sbGluZyBkb3duIGZvciBhIGJldHRlciBvdmVydmlldyBvZiBjb250ZW50IGFuZCBVWFxuICogbmF2aWdhdGlvbiBhcHBlYXJzIHdoZW4gc2Nyb2xsaW5nIHVwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5hdmlnYXRpb25Db250cm9sbGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE5hdmlnYXRpb24gRE9NIHNlbGVjdG9yc1xuICAgICAgICAgKiBOYXZpZ2F0aW9uIERPTSBzdGF0ZSBDU1MgY2xhc3Nlc1xuICAgICAgICAgKiBAdHlwZSB7e25hdmlnYXRpb246IHN0cmluZywgc3RhdGVzOiB7bmF2aWdhdGlvblNsaWRlVXA6IHN0cmluZywgbmF2aWdhdGlvblNjcm9sbGVkOiBzdHJpbmcsIG5hdmlnYXRpb25GaXhlZDogc3RyaW5nfX19XG4gICAgICAgICAqL1xuXG4gICAgICAgIHRoaXMuRE9NID0ge1xuICAgICAgICAgICAgbmF2aWdhdGlvbjogXCIuanMtbmF2aWdhdGlvbi13cmFwcGVyXCIsXG4gICAgICAgICAgICBzdGF0ZXM6IHtcbiAgICAgICAgICAgICAgICBuYXZpZ2F0aW9uU2Nyb2xsZWQ6IFwiaGFzLXNjcm9sbGVkXCIsXG4gICAgICAgICAgICAgICAgbmF2aWdhdGlvbkZpeGVkOiBcImlzLWZpeGVkXCIsXG4gICAgICAgICAgICAgICAgbmF2aWdhdGlvblNsaWRlVXA6IFwic2xpZGUtdXBcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGZsYWcsIHN0YXRlIHZhcmlhYmxlIGZvciBzY3JvbGxpbmcgZXZlbnRcbiAgICAgICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNjcm9sbGluZyA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogYW1vdW50IG9mIHBpeGVscyB0byBzY3JvbGwgZnJvbSB0b3AgZm9yIGFkZGluZyBcImhhcy1zY3JvbGxlZFwiIHN0YXRlIGNsYXNzXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNjcm9sbE5hdmlnYXRpb25PZmZzZXQgPSAyMDA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiB2YXJpYWJsZSBmb3Igc3RvcmluZyBhbW91bnQgb2Ygc2Nyb2xsIGZyb20gdG9wIHBvc2l0aW9uIHZhbHVlXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnByZXZpb3VzVG9wID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIHZhcmlhYmxlIGZvciBzdG9yaW5nIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIHZhbHVlXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmN1cnJlbnRUb3AgPSAwO1xuICAgICAgICB0aGlzLnNjcm9sbERlbHRhID0gMDtcbiAgICAgICAgdGhpcy5zY3JvbGxPZmZzZXQgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBmZXRjaCBuYXZpZ2F0aW9uIGVsZW1lbnQgRE9NIGVsZW1lbnRcbiAgICAgICAgICogQHR5cGUge0VsZW1lbnR9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm5hdmlnYXRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuRE9NLm5hdmlnYXRpb24pO1xuICAgIH1cblxuICAgIC8vcmVnaW9uIG1ldGhvZHNcbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIGluaXQoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTmF2aWdhdGlvbiBpbml0KClcIik7XG5cbiAgICAgICAgaWYgKHRoaXMubmF2aWdhdGlvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5uYXZpZ2F0aW9uQ29udHJvbGxlcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgJHt0aGlzLkRPTS5uYXZpZ2F0aW9ufSBkb2VzIG5vdCBleGlzdCBpbiB0aGUgRE9NIWApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBuYXZpZ2F0aW9uQ29udHJvbGxlcigpIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuc2Nyb2xsaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQodGhpcy5jaGVja1Njcm9sbCgpLCAyNTApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLmNoZWNrU2Nyb2xsKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKi9cbiAgICBjaGVja1Njcm9sbCgpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICBsZXQgY3VycmVudFRvcCA9IHdpbmRvdy5wYWdlWU9mZnNldCB8IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wO1xuXG4gICAgICAgIHRoaXMuY2hhbmdlTmF2aWdhdGlvblN0YXRlKGN1cnJlbnRUb3ApO1xuXG4gICAgICAgIHRoaXMucHJldmlvdXNUb3AgPSBjdXJyZW50VG9wO1xuICAgICAgICB0aGlzLnNjcm9sbGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGN1cnJlbnRUb3BcbiAgICAgKi9cbiAgICBjaGFuZ2VOYXZpZ2F0aW9uU3RhdGUoY3VycmVudFRvcCkge1xuICAgICAgICBpZiAoY3VycmVudFRvcCA+IHRoaXMuc2Nyb2xsTmF2aWdhdGlvbk9mZnNldCkge1xuICAgICAgICAgICAgdGhpcy5uYXZpZ2F0aW9uLmNsYXNzTGlzdC5hZGQodGhpcy5ET00uc3RhdGVzLm5hdmlnYXRpb25TY3JvbGxlZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm5hdmlnYXRpb24uY2xhc3NMaXN0LnJlbW92ZShcbiAgICAgICAgICAgICAgICB0aGlzLkRPTS5zdGF0ZXMubmF2aWdhdGlvblNjcm9sbGVkLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnByZXZpb3VzVG9wID49IGN1cnJlbnRUb3ApIHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsaW5nVXAoY3VycmVudFRvcCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbGluZ0Rvd24oY3VycmVudFRvcCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjdXJyZW50VG9wXG4gICAgICovXG4gICAgc2Nyb2xsaW5nVXAoY3VycmVudFRvcCkge1xuICAgICAgICBpZiAoY3VycmVudFRvcCA8IHRoaXMuc2Nyb2xsTmF2aWdhdGlvbk9mZnNldCkge1xuICAgICAgICAgICAgdGhpcy5uYXZpZ2F0aW9uLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5ET00uc3RhdGVzLm5hdmlnYXRpb25TbGlkZVVwKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXZpb3VzVG9wIC0gY3VycmVudFRvcCA+IHRoaXMuc2Nyb2xsRGVsdGEpIHtcbiAgICAgICAgICAgIHRoaXMubmF2aWdhdGlvbi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuRE9NLnN0YXRlcy5uYXZpZ2F0aW9uU2xpZGVVcCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjdXJyZW50VG9wXG4gICAgICovXG4gICAgc2Nyb2xsaW5nRG93bihjdXJyZW50VG9wKSB7XG4gICAgICAgIGlmIChjdXJyZW50VG9wID4gdGhpcy5zY3JvbGxOYXZpZ2F0aW9uT2Zmc2V0ICsgdGhpcy5zY3JvbGxPZmZzZXQpIHtcbiAgICAgICAgICAgIHRoaXMubmF2aWdhdGlvbi5jbGFzc0xpc3QuYWRkKHRoaXMuRE9NLnN0YXRlcy5uYXZpZ2F0aW9uU2xpZGVVcCk7XG4gICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFRvcCA+IHRoaXMuc2Nyb2xsTmF2aWdhdGlvbk9mZnNldCkge1xuICAgICAgICAgICAgdGhpcy5uYXZpZ2F0aW9uLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5ET00uc3RhdGVzLm5hdmlnYXRpb25TbGlkZVVwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vZW5kcmVnaW9uXG59XG4iLCJpbXBvcnQgKiBhcyBUSFJFRSBmcm9tIFwidGhyZWVcIjtcbmltcG9ydCAqIGFzIGRhdCBmcm9tIFwiZGF0Lmd1aVwiO1xuaW1wb3J0IGdzYXAgZnJvbSBcImdzYXBcIjtcblxuaW1wb3J0IHsgT3JiaXRDb250cm9scyB9IGZyb20gXCJ0aHJlZS9leGFtcGxlcy9qc20vY29udHJvbHMvT3JiaXRDb250cm9sc1wiO1xuaW1wb3J0IHsgR0xURkxvYWRlciB9IGZyb20gXCJ0aHJlZS9leGFtcGxlcy9qc20vbG9hZGVycy9HTFRGTG9hZGVyXCI7XG5pbXBvcnQgeyBEUkFDT0xvYWRlciB9IGZyb20gXCJ0aHJlZS9leGFtcGxlcy9qc20vbG9hZGVycy9EUkFDT0xvYWRlclwiO1xuaW1wb3J0IHsgUm9vbUVudmlyb25tZW50IH0gZnJvbSBcInRocmVlL2V4YW1wbGVzL2pzbS9lbnZpcm9ubWVudHMvUm9vbUVudmlyb25tZW50XCI7XG5pbXBvcnQgeyBsb2cgfSBmcm9tIFwidGhyZWVcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU29mYU1vZGVsQ29udHJvbGxlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuRE9NID0ge1xuICAgICAgICAgICAgbW9kZWxDb250YWluZXI6IFwiLmpzLXNvZmEtY29udGFpbmVyXCIsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5tb2RlbENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5ET00ubW9kZWxDb250YWluZXIpO1xuICAgICAgICBpZiAodGhpcy5tb2RlbENvbnRhaW5lciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJHTFRGTW9kZWxDb250cm9sbGVyIGluaXQoKVwiKTtcblxuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMubW9kZWxDb250YWluZXIub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMubW9kZWxDb250YWluZXIub2Zmc2V0SGVpZ2h0O1xuXG4gICAgICAgICAgICBUSFJFRS5DYWNoZS5lbmFibGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgdGhpcy50ZXh0dXJlID0gbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKTtcblxuICAgICAgICAgICAgLy8gZ3VpXG4gICAgICAgICAgICB0aGlzLmd1aSA9IG5ldyBkYXQuR1VJKHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNvZmEgY29uZmlnXCIsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gZ3VpIGNvbmZpZ1xuICAgICAgICAgICAgdGhpcy5ndWlDb25mID0ge1xuICAgICAgICAgICAgICAgIGF1dG9Sb3RhdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBhdXRvUm90YXRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdyaWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd0dyaWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzb2ZhTWF0ZXJpYWw6IFwiMVwiLFxuICAgICAgICAgICAgICAgIHNwaGVyZU1hdGVyaWFsOiBcIjFcIixcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMuaW5pdEZCWE1vZGVsKCk7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGluaXRGQlhNb2RlbCgpIHtcbiAgICAgICAgLy8gY2FtZXJhXG4gICAgICAgIHRoaXMuY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKDM1LCB0aGlzLndpZHRoIC8gdGhpcy5oZWlnaHQsIDAuNSwgNDAwKTtcbiAgICAgICAgdGhpcy5jYW1lcmEucG9zaXRpb24uc2V0KDE3LCAxMCwgMTcpO1xuXG4gICAgICAgIC8vIHNjZW5lXG4gICAgICAgIHRoaXMuc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcbiAgICAgICAgdGhpcy5zY2VuZS5iYWNrZ3JvdW5kID0gbmV3IFRIUkVFLkNvbG9yKDB4YmJiYmJiKTtcblxuICAgICAgICAvLyBncm91bmQgZ3JpZFxuICAgICAgICBjb25zdCBncmlkID0gbmV3IFRIUkVFLkdyaWRIZWxwZXIoMjAwMCwgNDAsIDB4MDAwMDAwLCAweDAwMDAwMCk7XG4gICAgICAgIGdyaWQubWF0ZXJpYWwub3BhY2l0eSA9IDAuMTtcbiAgICAgICAgZ3JpZC5tYXRlcmlhbC50cmFuc3BhcmVudCA9IHRydWU7XG4gICAgICAgIHRoaXMuc2NlbmUuYWRkKGdyaWQpO1xuICAgICAgICBpZiAoIXRoaXMuZ3VpQ29uZi5ncmlkLnNob3dHcmlkKSB7XG4gICAgICAgICAgICBncmlkLnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFkZCBndWkgZm9yIGdyaWRcbiAgICAgICAgdGhpcy5ndWkuYWRkKHRoaXMuZ3VpQ29uZi5ncmlkLCBcInNob3dHcmlkXCIpLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgZ3JpZC52aXNpYmxlID0gISF2YWx1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gcmVuZGVyZXJcbiAgICAgICAgdGhpcy5yZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHtcbiAgICAgICAgICAgIGFudGlhbGlhczogdHJ1ZSxcbiAgICAgICAgICAgIHBvd2VyUHJlZmVyZW5jZTogXCJoaWdoLXBlcmZvcm1hbmNlXCIsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0UGl4ZWxSYXRpbyh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U2l6ZSh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2hhZG93TWFwLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmdhbW1hRmFjdG9yID0gMi4yO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLm91dHB1dEVuY29kaW5nID0gVEhSRUUuc1JHQkVuY29kaW5nO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zaGFkb3dNYXAudHlwZSA9IFRIUkVFLlBDRlNoYWRvd01hcDtcbiAgICAgICAgdGhpcy5yZW5kZXJlci50b25lTWFwcGluZyA9IFRIUkVFLkFDRVNGaWxtaWNUb25lTWFwcGluZztcbiAgICAgICAgdGhpcy5yZW5kZXJlci50b25lTWFwcGluZ0V4cG9zdXJlID0gMTtcbiAgICAgICAgdGhpcy5tb2RlbENvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQpO1xuXG4gICAgICAgIGNvbnN0IGVudmlyb25tZW50ID0gbmV3IFJvb21FbnZpcm9ubWVudCgpO1xuICAgICAgICB0aGlzLnBtcmVtR2VuZXJhdG9yID0gbmV3IFRIUkVFLlBNUkVNR2VuZXJhdG9yKHRoaXMucmVuZGVyZXIpO1xuICAgICAgICB0aGlzLnNjZW5lLmVudmlyb25tZW50ID0gdGhpcy5wbXJlbUdlbmVyYXRvci5mcm9tU2NlbmUoZW52aXJvbm1lbnQpLnRleHR1cmU7XG5cbiAgICAgICAgLy8gbG9hZGVyXG4gICAgICAgIHRoaXMubG9hZE1vZGVsKCk7XG4gICAgICAgIHRoaXMubG9hZFNwaGVyZSgpO1xuXG4gICAgICAgIC8vIG9yYml0IGNvbnRyb2xzXG4gICAgICAgIHRoaXMuY29udHJvbHMgPSBuZXcgT3JiaXRDb250cm9scyh0aGlzLmNhbWVyYSwgdGhpcy5yZW5kZXJlci5kb21FbGVtZW50KTtcbiAgICAgICAgdGhpcy5jb250cm9scy50YXJnZXQuc2V0KDAsIDEsIDApO1xuICAgICAgICB0aGlzLmNvbnRyb2xzLmF1dG9Sb3RhdGUgPSB0aGlzLmd1aUNvbmYuYXV0b1JvdGF0aW9uLmF1dG9Sb3RhdGU7XG4gICAgICAgIHRoaXMuY29udHJvbHMuYXV0b1JvdGF0ZVNwZWVkID0gMTtcbiAgICAgICAgdGhpcy5jb250cm9scy5lbmFibGVEYW1waW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jb250cm9scy5taW5EaXN0YW5jZSA9IDQ7XG4gICAgICAgIHRoaXMuY29udHJvbHMubWF4RGlzdGFuY2UgPSAzMDtcbiAgICAgICAgdGhpcy5jb250cm9scy5tYXhQb2xhckFuZ2xlID0gTWF0aC5QSSAvIDI7XG4gICAgICAgIHRoaXMuY29udHJvbHMubWluUG9sYXJBbmdsZSA9IDA7XG4gICAgICAgIHRoaXMuY29udHJvbHMudXBkYXRlKCk7XG5cbiAgICAgICAgdGhpcy5ndWkuYWRkKHRoaXMuZ3VpQ29uZi5hdXRvUm90YXRpb24sIFwiYXV0b1JvdGF0ZVwiKS5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHMuYXV0b1JvdGF0ZSA9IHZhbHVlICE9PSBmYWxzZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gaGFuZGxlIHJlc2l6ZVxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCAoKSA9PiB0aGlzLm9uV2luZG93UmVzaXplKCksIGZhbHNlKTtcbiAgICB9XG5cbiAgICBsb2FkTW9kZWwoKSB7XG4gICAgICAgIGNvbnN0IG1hdGVyaWFscyA9IHtcbiAgICAgICAgICAgIG1hdDE6IHtcbiAgICAgICAgICAgICAgICBiYXNlOiB0aGlzLnRleHR1cmUubG9hZChcInN0YXRpYy9tb2RlbHMvbWF0MS9iYXNlLmpwZ1wiKSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMudGV4dHVyZS5sb2FkKFwic3RhdGljL21vZGVscy9tYXQxL2hlaWdodC5wbmdcIiksXG4gICAgICAgICAgICAgICAgYW86IHRoaXMudGV4dHVyZS5sb2FkKFwic3RhdGljL21vZGVscy9tYXQxL2FvLmpwZ1wiKSxcbiAgICAgICAgICAgICAgICBub3JtOiB0aGlzLnRleHR1cmUubG9hZChcInN0YXRpYy9tb2RlbHMvbWF0MS9ub3JtLmpwZ1wiKSxcbiAgICAgICAgICAgICAgICByb3VnaDogdGhpcy50ZXh0dXJlLmxvYWQoXCJzdGF0aWMvbW9kZWxzL21hdDEvcm91Z2guanBnXCIpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1hdDI6IHtcbiAgICAgICAgICAgICAgICBiYXNlOiB0aGlzLnRleHR1cmUubG9hZChcInN0YXRpYy9tb2RlbHMvbWF0Mi9iYXNlLmpwZ1wiKSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMudGV4dHVyZS5sb2FkKFwic3RhdGljL21vZGVscy9tYXQyL2hlaWdodC5wbmdcIiksXG4gICAgICAgICAgICAgICAgYW86IHRoaXMudGV4dHVyZS5sb2FkKFwic3RhdGljL21vZGVscy9tYXQyL2FvLmpwZ1wiKSxcbiAgICAgICAgICAgICAgICBub3JtOiB0aGlzLnRleHR1cmUubG9hZChcInN0YXRpYy9tb2RlbHMvbWF0Mi9ub3JtLmpwZ1wiKSxcbiAgICAgICAgICAgICAgICByb3VnaDogdGhpcy50ZXh0dXJlLmxvYWQoXCJzdGF0aWMvbW9kZWxzL21hdDIvcm91Z2guanBnXCIpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1hdDM6IHtcbiAgICAgICAgICAgICAgICBiYXNlOiB0aGlzLnRleHR1cmUubG9hZChcInN0YXRpYy9tb2RlbHMvbWF0My9iYXNlLmpwZ1wiKSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMudGV4dHVyZS5sb2FkKFwic3RhdGljL21vZGVscy9tYXQzL2hlaWdodC5wbmdcIiksXG4gICAgICAgICAgICAgICAgYW86IHRoaXMudGV4dHVyZS5sb2FkKFwic3RhdGljL21vZGVscy9tYXQzL2FvLmpwZ1wiKSxcbiAgICAgICAgICAgICAgICBub3JtOiB0aGlzLnRleHR1cmUubG9hZChcInN0YXRpYy9tb2RlbHMvbWF0My9ub3JtLmpwZ1wiKSxcbiAgICAgICAgICAgICAgICByb3VnaDogdGhpcy50ZXh0dXJlLmxvYWQoXCJzdGF0aWMvbW9kZWxzL21hdDMvcm91Z2guanBnXCIpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1hdDQ6IHtcbiAgICAgICAgICAgICAgICBiYXNlOiB0aGlzLnRleHR1cmUubG9hZChcInN0YXRpYy9tb2RlbHMvbWF0NC9iYXNlLmpwZ1wiKSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMudGV4dHVyZS5sb2FkKFwic3RhdGljL21vZGVscy9tYXQ0L2hlaWdodC5wbmdcIiksXG4gICAgICAgICAgICAgICAgYW86IHRoaXMudGV4dHVyZS5sb2FkKFwic3RhdGljL21vZGVscy9tYXQ0L2FvLmpwZ1wiKSxcbiAgICAgICAgICAgICAgICBub3JtOiB0aGlzLnRleHR1cmUubG9hZChcInN0YXRpYy9tb2RlbHMvbWF0NC9ub3JtLmpwZ1wiKSxcbiAgICAgICAgICAgICAgICByb3VnaDogdGhpcy50ZXh0dXJlLmxvYWQoXCJzdGF0aWMvbW9kZWxzL21hdDQvcm91Z2guanBnXCIpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpb246IHtcbiAgICAgICAgICAgICAgICBiYXNlOiB0aGlzLnRleHR1cmUubG9hZChcInN0YXRpYy9tb2RlbHMvbWF0TGlvbi9iYXNlLmpwZ1wiLCAodGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRleC5lbmNvZGluZyA9IFRIUkVFLnNSR0JFbmNvZGluZztcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMudGV4dHVyZS5sb2FkKFwic3RhdGljL21vZGVscy9tYXRMaW9uL2hlaWdodC5qcGdcIiwgKHRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0ZXguZW5jb2RpbmcgPSBUSFJFRS5zUkdCRW5jb2Rpbmc7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgYW86IHRoaXMudGV4dHVyZS5sb2FkKFwic3RhdGljL21vZGVscy9tYXRMaW9uL2FvLmpwZ1wiLCAodGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRleC5lbmNvZGluZyA9IFRIUkVFLnNSR0JFbmNvZGluZztcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBub3JtOiB0aGlzLnRleHR1cmUubG9hZChcInN0YXRpYy9tb2RlbHMvbWF0TGlvbi9ub3JtLmpwZ1wiLCAodGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRleC5lbmNvZGluZyA9IFRIUkVFLnNSR0JFbmNvZGluZztcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICByb3VnaDogdGhpcy50ZXh0dXJlLmxvYWQoXCJzdGF0aWMvbW9kZWxzL21hdExpb24vcm91Z2guanBnXCIsICh0ZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGV4LmVuY29kaW5nID0gVEhSRUUuc1JHQkVuY29kaW5nO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaFBoeXNpY2FsTWF0ZXJpYWwoe1xuICAgICAgICAgICAgbWFwOiBtYXRlcmlhbHMubWF0MS5iYXNlLFxuICAgICAgICAgICAgYW9NYXA6IG1hdGVyaWFscy5tYXQxLmFvLFxuICAgICAgICAgICAgYW9NYXBJbnRlbnNpdHk6IDEsXG4gICAgICAgICAgICBub3JtYWxNYXA6IG1hdGVyaWFscy5tYXQxLm5vcm0sXG4gICAgICAgICAgICBkaXNwbGFjZW1lbnRNYXA6IG1hdGVyaWFscy5tYXQxLmhlaWdodCxcbiAgICAgICAgICAgIGRpc3BsYWNlbWVudFNjYWxlOiAwLFxuICAgICAgICAgICAgcm91Z2huZXNzTWFwOiBtYXRlcmlhbHMubWF0MS5yb3VnaCxcbiAgICAgICAgICAgIG1ldGFsbmVzczogMCxcbiAgICAgICAgICAgIGZsYXRTaGFkaW5nOiBmYWxzZSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbWF0ZXJpYWwubWFwLm1pbkZpbHRlciA9IFRIUkVFLk5lYXJlc3RGaWx0ZXI7XG4gICAgICAgIG1hdGVyaWFsLm1hcC5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcbiAgICAgICAgbWF0ZXJpYWwubWFwLndyYXBTID0gbWF0ZXJpYWwubWFwLndyYXBUID0gVEhSRUUuUmVwZWF0V3JhcHBpbmc7XG4gICAgICAgIG1hdGVyaWFsLmFvTWFwLndyYXBTID0gbWF0ZXJpYWwuYW9NYXAud3JhcFQgPSBUSFJFRS5SZXBlYXRXcmFwcGluZztcbiAgICAgICAgbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwLndyYXBTID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwLndyYXBUID0gVEhSRUUuUmVwZWF0V3JhcHBpbmc7XG4gICAgICAgIG1hdGVyaWFsLm5vcm1hbE1hcC53cmFwUyA9IG1hdGVyaWFsLm5vcm1hbE1hcC53cmFwVCA9IFRIUkVFLlJlcGVhdFdyYXBwaW5nO1xuICAgICAgICBtYXRlcmlhbC5yb3VnaG5lc3NNYXAud3JhcFMgPSBtYXRlcmlhbC5yb3VnaG5lc3NNYXAud3JhcFQgPSBUSFJFRS5SZXBlYXRXcmFwcGluZztcblxuICAgICAgICBtYXRlcmlhbC5tYXAucmVwZWF0LnNldCgwLjE1LCAwLjE1KTtcbiAgICAgICAgbWF0ZXJpYWwuYW9NYXAucmVwZWF0LnNldCgwLjE1LCAwLjE1KTtcbiAgICAgICAgbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwLnJlcGVhdC5zZXQoMC4xNSwgMC4xNSk7XG4gICAgICAgIG1hdGVyaWFsLm5vcm1hbE1hcC5yZXBlYXQuc2V0KDAuMTUsIDAuMTUpO1xuICAgICAgICBtYXRlcmlhbC5yb3VnaG5lc3NNYXAucmVwZWF0LnNldCgwLjE1LCAwLjE1KTtcblxuICAgICAgICAvLyBnZXQgbW9kZWxcbiAgICAgICAgbGV0IG1vZGVsID0gdGhpcy5tb2RlbENvbnRhaW5lci5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1vZGVsLXNvdXJjZVwiKTtcblxuICAgICAgICAvLyBsb2FkZXJcbiAgICAgICAgY29uc3QgbG9hZGVyID0gbmV3IEdMVEZMb2FkZXIoKTtcblxuICAgICAgICBjb25zdCBkcmFjb0xvYWRlciA9IG5ldyBEUkFDT0xvYWRlcigpO1xuICAgICAgICBkcmFjb0xvYWRlci5zZXREZWNvZGVyUGF0aChcImRyYWNvL1wiKTtcbiAgICAgICAgbG9hZGVyLnNldERSQUNPTG9hZGVyKGRyYWNvTG9hZGVyKTtcblxuICAgICAgICBsb2FkZXIubG9hZChtb2RlbCwgKG1vZGVsKSA9PiB7XG4gICAgICAgICAgICBtb2RlbC5zY2VuZS5wb3NpdGlvbi54ID0gLTQ7XG4gICAgICAgICAgICBtYXRlcmlhbC5jb2xvci5jb252ZXJ0U1JHQlRvTGluZWFyKCk7XG5cbiAgICAgICAgICAgIG1vZGVsLnNjZW5lLnRyYXZlcnNlKChvYmplY3QpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAob2JqZWN0LmlzTWVzaCkge1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QuY2FzdFNoYWRvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5yZWNlaXZlU2hhZG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0Lm1hdGVyaWFsLmNvbG9yLmNvbnZlcnRTUkdCVG9MaW5lYXIoKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBpbml0aWFsIG1hdGVyaWFsIHNldHVwXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5tYXRlcmlhbCA9IG1hdGVyaWFsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLmd1aVxuICAgICAgICAgICAgICAgIC5hZGQodGhpcy5ndWlDb25mLCBcInNvZmFNYXRlcmlhbFwiLCB7XG4gICAgICAgICAgICAgICAgICAgIE1hdGVyaWFsMTogMSxcbiAgICAgICAgICAgICAgICAgICAgTWF0ZXJpYWwyOiAyLFxuICAgICAgICAgICAgICAgICAgICBNYXRlcmlhbDM6IDMsXG4gICAgICAgICAgICAgICAgICAgIE1hdGVyaWFsNDogNCxcbiAgICAgICAgICAgICAgICAgICAgTWF0ZXJpYWw1OiA1LFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybU1hdGVyaWFsKHZhbHVlLCBtYXRlcmlhbCwgbWF0ZXJpYWxzLCAwLjE1KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5zY2VuZS5hZGQobW9kZWwuc2NlbmUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBsb2FkU3BoZXJlKCkge1xuICAgICAgICBjb25zdCBtYXRlcmlhbHMgPSB7XG4gICAgICAgICAgICBtYXQxOiB7XG4gICAgICAgICAgICAgICAgYmFzZTogdGhpcy50ZXh0dXJlLmxvYWQoXCJzdGF0aWMvbW9kZWxzL21hdDEvYmFzZS5qcGdcIiksXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLnRleHR1cmUubG9hZChcInN0YXRpYy9tb2RlbHMvbWF0MS9oZWlnaHQucG5nXCIpLFxuICAgICAgICAgICAgICAgIGFvOiB0aGlzLnRleHR1cmUubG9hZChcInN0YXRpYy9tb2RlbHMvbWF0MS9hby5qcGdcIiksXG4gICAgICAgICAgICAgICAgbm9ybTogdGhpcy50ZXh0dXJlLmxvYWQoXCJzdGF0aWMvbW9kZWxzL21hdDEvbm9ybS5qcGdcIiksXG4gICAgICAgICAgICAgICAgcm91Z2g6IHRoaXMudGV4dHVyZS5sb2FkKFwic3RhdGljL21vZGVscy9tYXQxL3JvdWdoLmpwZ1wiKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYXQyOiB7XG4gICAgICAgICAgICAgICAgYmFzZTogdGhpcy50ZXh0dXJlLmxvYWQoXCJzdGF0aWMvbW9kZWxzL21hdDIvYmFzZS5qcGdcIiksXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLnRleHR1cmUubG9hZChcInN0YXRpYy9tb2RlbHMvbWF0Mi9oZWlnaHQucG5nXCIpLFxuICAgICAgICAgICAgICAgIGFvOiB0aGlzLnRleHR1cmUubG9hZChcInN0YXRpYy9tb2RlbHMvbWF0Mi9hby5qcGdcIiksXG4gICAgICAgICAgICAgICAgbm9ybTogdGhpcy50ZXh0dXJlLmxvYWQoXCJzdGF0aWMvbW9kZWxzL21hdDIvbm9ybS5qcGdcIiksXG4gICAgICAgICAgICAgICAgcm91Z2g6IHRoaXMudGV4dHVyZS5sb2FkKFwic3RhdGljL21vZGVscy9tYXQyL3JvdWdoLmpwZ1wiKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYXQzOiB7XG4gICAgICAgICAgICAgICAgYmFzZTogdGhpcy50ZXh0dXJlLmxvYWQoXCJzdGF0aWMvbW9kZWxzL21hdDMvYmFzZS5qcGdcIiksXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLnRleHR1cmUubG9hZChcInN0YXRpYy9tb2RlbHMvbWF0My9oZWlnaHQucG5nXCIpLFxuICAgICAgICAgICAgICAgIGFvOiB0aGlzLnRleHR1cmUubG9hZChcInN0YXRpYy9tb2RlbHMvbWF0My9hby5qcGdcIiksXG4gICAgICAgICAgICAgICAgbm9ybTogdGhpcy50ZXh0dXJlLmxvYWQoXCJzdGF0aWMvbW9kZWxzL21hdDMvbm9ybS5qcGdcIiksXG4gICAgICAgICAgICAgICAgcm91Z2g6IHRoaXMudGV4dHVyZS5sb2FkKFwic3RhdGljL21vZGVscy9tYXQzL3JvdWdoLmpwZ1wiKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYXQ0OiB7XG4gICAgICAgICAgICAgICAgYmFzZTogdGhpcy50ZXh0dXJlLmxvYWQoXCJzdGF0aWMvbW9kZWxzL21hdDQvYmFzZS5qcGdcIiksXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLnRleHR1cmUubG9hZChcInN0YXRpYy9tb2RlbHMvbWF0NC9oZWlnaHQucG5nXCIpLFxuICAgICAgICAgICAgICAgIGFvOiB0aGlzLnRleHR1cmUubG9hZChcInN0YXRpYy9tb2RlbHMvbWF0NC9hby5qcGdcIiksXG4gICAgICAgICAgICAgICAgbm9ybTogdGhpcy50ZXh0dXJlLmxvYWQoXCJzdGF0aWMvbW9kZWxzL21hdDQvbm9ybS5qcGdcIiksXG4gICAgICAgICAgICAgICAgcm91Z2g6IHRoaXMudGV4dHVyZS5sb2FkKFwic3RhdGljL21vZGVscy9tYXQ0L3JvdWdoLmpwZ1wiKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaW9uOiB7XG4gICAgICAgICAgICAgICAgYmFzZTogdGhpcy50ZXh0dXJlLmxvYWQoXCJzdGF0aWMvbW9kZWxzL21hdExpb24vYmFzZS5qcGdcIiksXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLnRleHR1cmUubG9hZChcInN0YXRpYy9tb2RlbHMvbWF0TGlvbi9oZWlnaHQuanBnXCIpLFxuICAgICAgICAgICAgICAgIGFvOiB0aGlzLnRleHR1cmUubG9hZChcInN0YXRpYy9tb2RlbHMvbWF0TGlvbi9hby5qcGdcIiksXG4gICAgICAgICAgICAgICAgbm9ybTogdGhpcy50ZXh0dXJlLmxvYWQoXCJzdGF0aWMvbW9kZWxzL21hdExpb24vbm9ybS5qcGdcIiksXG4gICAgICAgICAgICAgICAgcm91Z2g6IHRoaXMudGV4dHVyZS5sb2FkKFwic3RhdGljL21vZGVscy9tYXRMaW9uL3JvdWdoLmpwZ1wiKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG5cbiAgICAgICAgbGV0IG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hQaHlzaWNhbE1hdGVyaWFsKHtcbiAgICAgICAgICAgIG1hcDogbWF0ZXJpYWxzLm1hdDEuYmFzZSxcbiAgICAgICAgICAgIGFvTWFwOiBtYXRlcmlhbHMubWF0MS5hbyxcbiAgICAgICAgICAgIGFvTWFwSW50ZW5zaXR5OiAxLFxuICAgICAgICAgICAgbm9ybWFsTWFwOiBtYXRlcmlhbHMubWF0MS5ub3JtLFxuICAgICAgICAgICAgZGlzcGxhY2VtZW50TWFwOiBtYXRlcmlhbHMubWF0MS5oZWlnaHQsXG4gICAgICAgICAgICBkaXNwbGFjZW1lbnRTY2FsZTogMC4wMjUsXG4gICAgICAgICAgICByb3VnaG5lc3NNYXA6IG1hdGVyaWFscy5tYXQxLnJvdWdoLFxuICAgICAgICAgICAgbWV0YWxuZXNzOiAwLFxuICAgICAgICAgICAgZmxhdFNoYWRpbmc6IGZhbHNlLFxuICAgICAgICB9KTtcblxuICAgICAgICBtYXRlcmlhbC5tYXAubWluRmlsdGVyID0gVEhSRUUuTmVhcmVzdEZpbHRlcjtcbiAgICAgICAgbWF0ZXJpYWwubWFwLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuICAgICAgICBtYXRlcmlhbC5tYXAud3JhcFMgPSBtYXRlcmlhbC5tYXAud3JhcFQgPSBUSFJFRS5SZXBlYXRXcmFwcGluZztcbiAgICAgICAgbWF0ZXJpYWwuYW9NYXAud3JhcFMgPSBtYXRlcmlhbC5hb01hcC53cmFwVCA9IFRIUkVFLlJlcGVhdFdyYXBwaW5nO1xuICAgICAgICBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAud3JhcFMgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAud3JhcFQgPSBUSFJFRS5SZXBlYXRXcmFwcGluZztcbiAgICAgICAgbWF0ZXJpYWwubm9ybWFsTWFwLndyYXBTID0gbWF0ZXJpYWwubm9ybWFsTWFwLndyYXBUID0gVEhSRUUuUmVwZWF0V3JhcHBpbmc7XG4gICAgICAgIG1hdGVyaWFsLnJvdWdobmVzc01hcC53cmFwUyA9IG1hdGVyaWFsLnJvdWdobmVzc01hcC53cmFwVCA9IFRIUkVFLlJlcGVhdFdyYXBwaW5nO1xuXG4gICAgICAgIG1hdGVyaWFsLm1hcC5yZXBlYXQuc2V0KDQsIDQpO1xuICAgICAgICBtYXRlcmlhbC5hb01hcC5yZXBlYXQuc2V0KDQsIDQpO1xuICAgICAgICBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAucmVwZWF0LnNldCg0LCA0KTtcbiAgICAgICAgbWF0ZXJpYWwubm9ybWFsTWFwLnJlcGVhdC5zZXQoNCwgNCk7XG4gICAgICAgIG1hdGVyaWFsLnJvdWdobmVzc01hcC5yZXBlYXQuc2V0KDQsIDQpO1xuXG4gICAgICAgIHRoaXMuZ3VpXG4gICAgICAgICAgICAuYWRkKHRoaXMuZ3VpQ29uZiwgXCJzcGhlcmVNYXRlcmlhbFwiLCB7XG4gICAgICAgICAgICAgICAgTWF0ZXJpYWwxOiAxLFxuICAgICAgICAgICAgICAgIE1hdGVyaWFsMjogMixcbiAgICAgICAgICAgICAgICBNYXRlcmlhbDM6IDMsXG4gICAgICAgICAgICAgICAgTWF0ZXJpYWw0OiA0LFxuICAgICAgICAgICAgICAgIE1hdGVyaWFsNTogNSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub25DaGFuZ2UoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm1NYXRlcmlhbCh2YWx1ZSwgbWF0ZXJpYWwsIG1hdGVyaWFscywgNCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnNwaGVyZShtYXRlcmlhbCk7XG4gICAgfVxuXG4gICAgc3BoZXJlKG1hdGVyaWFsKSB7XG4gICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KDEuNSwgNDAwLCA0MDApO1xuICAgICAgICBjb25zdCBzcGhlcmUgPSBuZXcgVEhSRUUuTWVzaChnZW9tZXRyeSwgbWF0ZXJpYWwpO1xuICAgICAgICBzcGhlcmUucG9zaXRpb24uc2V0KDQsIDIsIDApO1xuICAgICAgICB0aGlzLnNjZW5lLmFkZChzcGhlcmUpO1xuXG4gICAgICAgIGdzYXAudG8oc3BoZXJlLnJvdGF0aW9uLCB7XG4gICAgICAgICAgICBkdXJhdGlvbjogMjAsXG4gICAgICAgICAgICBlYXNlOiBcIm5vbmVcIixcbiAgICAgICAgICAgIHk6IE1hdGguUEkgKiAyLFxuICAgICAgICAgICAgcmVwZWF0OiAtMSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdHJhbnNmb3JtTWF0ZXJpYWwoaW5kZXgsIG1hdGVyaWFsLCBtYXRlcmlhbHMsIHNjYWxlKSB7XG4gICAgICAgIGxldCBtYXQgPSBudWxsO1xuXG4gICAgICAgIGlmIChpbmRleCA9PT0gXCIyXCIpIHtcbiAgICAgICAgICAgIG1hdCA9IG1hdGVyaWFscy5tYXQyO1xuICAgICAgICB9IGVsc2UgaWYgKGluZGV4ID09PSBcIjNcIikge1xuICAgICAgICAgICAgbWF0ID0gbWF0ZXJpYWxzLm1hdDM7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IFwiNFwiKSB7XG4gICAgICAgICAgICBtYXQgPSBtYXRlcmlhbHMubWF0NDtcbiAgICAgICAgfSBlbHNlIGlmIChpbmRleCA9PT0gXCI1XCIpIHtcbiAgICAgICAgICAgIG1hdCA9IG1hdGVyaWFscy5saW9uO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWF0ID0gbWF0ZXJpYWxzLm1hdDE7XG4gICAgICAgIH1cblxuICAgICAgICBtYXQuYmFzZS5taW5GaWx0ZXIgPSBUSFJFRS5OZWFyZXN0RmlsdGVyO1xuICAgICAgICBtYXQuYmFzZS5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcbiAgICAgICAgbWF0ZXJpYWwubWFwID0gbWF0LmJhc2U7XG4gICAgICAgIG1hdGVyaWFsLmFvTWFwID0gbWF0LmFvO1xuICAgICAgICBtYXRlcmlhbC5ub3JtYWxNYXAgPSBtYXQubm9ybTtcbiAgICAgICAgbWF0ZXJpYWwucm91Z2huZXNzTWFwID0gbWF0LnJvdWdoO1xuXG4gICAgICAgIG1hdGVyaWFsLm1hcC53cmFwUyA9IG1hdGVyaWFsLm1hcC53cmFwVCA9IFRIUkVFLlJlcGVhdFdyYXBwaW5nO1xuICAgICAgICBtYXRlcmlhbC5hb01hcC53cmFwUyA9IG1hdGVyaWFsLmFvTWFwLndyYXBUID0gVEhSRUUuUmVwZWF0V3JhcHBpbmc7XG4gICAgICAgIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcC53cmFwUyA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcC53cmFwVCA9IFRIUkVFLlJlcGVhdFdyYXBwaW5nO1xuICAgICAgICBtYXRlcmlhbC5ub3JtYWxNYXAud3JhcFMgPSBtYXRlcmlhbC5ub3JtYWxNYXAud3JhcFQgPSBUSFJFRS5SZXBlYXRXcmFwcGluZztcbiAgICAgICAgbWF0ZXJpYWwucm91Z2huZXNzTWFwLndyYXBTID0gbWF0ZXJpYWwucm91Z2huZXNzTWFwLndyYXBUID0gVEhSRUUuUmVwZWF0V3JhcHBpbmc7XG5cbiAgICAgICAgbWF0ZXJpYWwubWFwLnJlcGVhdC5zZXQoc2NhbGUsIHNjYWxlKTtcbiAgICAgICAgbWF0ZXJpYWwuYW9NYXAucmVwZWF0LnNldChzY2FsZSwgc2NhbGUpO1xuICAgICAgICBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAucmVwZWF0LnNldChzY2FsZSwgc2NhbGUpO1xuICAgICAgICBtYXRlcmlhbC5ub3JtYWxNYXAucmVwZWF0LnNldChzY2FsZSwgc2NhbGUpO1xuICAgICAgICBtYXRlcmlhbC5yb3VnaG5lc3NNYXAucmVwZWF0LnNldChzY2FsZSwgc2NhbGUpO1xuICAgIH1cblxuICAgIG9uV2luZG93UmVzaXplKCkge1xuICAgICAgICB0aGlzLmNhbWVyYS5hc3BlY3QgPSB0aGlzLndpZHRoIC8gdGhpcy5oZWlnaHQ7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTaXplKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICB9XG5cbiAgICBhbmltYXRlKCkge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5hbmltYXRlKCkpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbmRlcih0aGlzLnNjZW5lLCB0aGlzLmNhbWVyYSk7XG4gICAgICAgIHRoaXMuY29udHJvbHMudXBkYXRlKCk7XG4gICAgfVxufVxuIiwiLyoqXG4gKiBHcmlkIGhlbHBlclxuICogU2hvdyBncmlkIG92ZXJsYXkgd2hlbiBkZXZlbG9waW5nXG4gKiBOb3QgaW5jbHVkZWQgaW4gcHJvZHVjdGlvbiBidW5kbGUgSlMgZmlsZVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHcmlkSGVscGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdyaWQgRE9NIHNlbGVjdG9yXG4gICAgICAgICAqIEB0eXBlIHt7Z3JpZDogc3RyaW5nfX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuRE9NID0ge1xuICAgICAgICAgICAgZ3JpZDogXCJncmlkXCIsXG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdyaWQgb3B0aW9uc1xuICAgICAgICAgKiBAdHlwZSB7e2d1dHRlckZpeGVkOiBib29sZWFuLCBpbml0aWFsRGlzcGxheTogc3RyaW5nLCBncmlkRml4ZWQ6IGJvb2xlYW4sIGd1dHRlcldpZHRoOiBudW1iZXIsIGdyaWRDb2xvcjogc3RyaW5nLCBjb2x1bW5Db3VudDogbnVtYmVyLCBncmlkV2lkdGg6IG51bWJlciwgY29sdW1uQmdDb2xvcjogc3RyaW5nfX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZ3JpZE9wdGlvbnMgPSB7XG4gICAgICAgICAgICBpbml0aWFsRGlzcGxheTogXCJub25lXCIsIC8vIFwiZmxleFwiIG9yIFwibm9uZVwiXG4gICAgICAgICAgICBjb2x1bW5Db3VudDogMjQsXG4gICAgICAgICAgICBncmlkV2lkdGg6IDE0NDAsIC8vIHB4XG4gICAgICAgICAgICBncmlkRml4ZWQ6IHRydWUsXG4gICAgICAgICAgICBndXR0ZXJXaWR0aDogMCwgLy8gcHhcbiAgICAgICAgICAgIGd1dHRlckZpeGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGdyaWRDb2xvcjogXCJyZ2IoMjU1LCAwLCAyNTUsIDAuMTUpXCIsXG4gICAgICAgICAgICBjb2x1bW5CZ0NvbG9yOiBcInJnYigyNTUsIDAsIDI1NSwgMC4wMjUpXCIsXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgY29uc29sZUxvZ1N0eWxlID0gW1xuICAgICAgICAgICAgXCJiYWNrZ3JvdW5kLWNvbG9yOiAjYTZhNmE2XCIsXG4gICAgICAgICAgICBcImNvbG9yOiBibGFja1wiLFxuICAgICAgICAgICAgXCJkaXNwbGF5OiBibG9ja1wiLFxuICAgICAgICAgICAgXCJsaW5lLWhlaWdodDogMjRweFwiLFxuICAgICAgICAgICAgXCJ0ZXh0LWFsaWduOiBjZW50ZXJcIixcbiAgICAgICAgICAgIFwiYm9yZGVyOiAxcHggc29saWQgI2ZmZmZmZlwiLFxuICAgICAgICAgICAgXCJmb250LXdlaWdodDogYm9sZFwiLFxuICAgICAgICBdLmpvaW4oXCI7XCIpO1xuXG4gICAgICAgIGNvbnNvbGUuaW5mbyhcInRvZ2dsZSBncmlkOiAlYyBBbHQvT3B0aW9uICsgRyBcIiwgY29uc29sZUxvZ1N0eWxlKTtcblxuICAgICAgICB0aGlzLmdyaWQgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuY29sdW1uV2lkdGggPVxuICAgICAgICAgICAgKHRoaXMuZ3JpZE9wdGlvbnMuZ3JpZFdpZHRoIC1cbiAgICAgICAgICAgICAgICAodGhpcy5ncmlkT3B0aW9ucy5jb2x1bW5Db3VudCAtIDEpICpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ncmlkT3B0aW9ucy5ndXR0ZXJXaWR0aCkgL1xuICAgICAgICAgICAgdGhpcy5ncmlkT3B0aW9ucy5jb2x1bW5Db3VudDtcblxuICAgICAgICB0aGlzLmNvbHVtbldpZHRoUGVyY2VudGFnZSA9IGAke1xuICAgICAgICAgICAgKHRoaXMuY29sdW1uV2lkdGggLyB0aGlzLmdyaWRPcHRpb25zLmdyaWRXaWR0aCkgKiAxMDBcbiAgICAgICAgfSVgO1xuXG4gICAgICAgIHRoaXMuZ3V0dGVyV2lkdGhQZXJjZW50YWdlID0gYCR7XG4gICAgICAgICAgICAodGhpcy5ncmlkT3B0aW9ucy5ndXR0ZXJXaWR0aCAvIHRoaXMuZ3JpZE9wdGlvbnMuZ3JpZFdpZHRoKSAqIDEwMFxuICAgICAgICB9JWA7XG4gICAgfVxuXG4gICAgaW5pdCgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJHcmlkSGVscGVyIGluaXQoKVwiKTtcbiAgICAgICAgdGhpcy5pbml0R3JpZCgpO1xuICAgICAgICB0aGlzLmtleWJvYXJkU2hvcnRjdXQoKTtcbiAgICB9XG5cbiAgICBpbml0R3JpZCgpIHtcbiAgICAgICAgLy8gY3JlYXRlIGdyaWQgb3ZlcmxheSBlbGVtZW50XG4gICAgICAgIHRoaXMuZ3JpZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHRoaXMuZ3JpZC5pZCA9IHRoaXMuRE9NLmdyaWQ7XG5cbiAgICAgICAgLy8gc3R5bGUgZ3JpZCBlbGVtZW50XG4gICAgICAgIHRoaXMuZ3JpZC5zdHlsZS5jc3NUZXh0ID0gYFxuICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICAgICAgICBkaXNwbGF5OiAke3RoaXMuZ3JpZE9wdGlvbnMuaW5pdGlhbERpc3BsYXl9O1xuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgdG9wOiAwO1xuICAgICAgICAgICAgbGVmdDogNTAlO1xuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xuICAgICAgICAgICAgei1pbmRleDogOTk5O1xuICAgICAgICBgO1xuXG4gICAgICAgIGlmICh0aGlzLmdyaWRPcHRpb25zLmdyaWRGaXhlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgdGhpcy5ncmlkLnN0eWxlLm1heFdpZHRoID0gYCR7dGhpcy5ncmlkT3B0aW9ucy5ncmlkV2lkdGh9cHhgO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmdyaWRPcHRpb25zLmd1dHRlcldpZHRoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5ncmlkLnN0eWxlLmJvcmRlckxlZnQgPSBcIm5vbmVcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFkZCBncmlkIGNvbnRhaW5lciB0byBwYWdlXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5ncmlkKTtcblxuICAgICAgICAvLyBhZGQgY29sdW1ucyB0byBncmlkXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ncmlkT3B0aW9ucy5jb2x1bW5Db3VudDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY29sdW1uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlcIik7XG4gICAgICAgICAgICB0aGlzLmdyaWQuYXBwZW5kQ2hpbGQoY29sdW1uKTtcblxuICAgICAgICAgICAgY29sdW1uLnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBhdXRvO1xuICAgICAgICAgICAgICAgIGZsZXgtZ3JvdzogMTtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3RoaXMuZ3JpZE9wdGlvbnMuY29sdW1uQmdDb2xvcn07XG4gICAgICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAke3RoaXMuZ3JpZE9wdGlvbnMuZ3JpZENvbG9yfTtcbiAgICAgICAgICAgIGA7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmdyaWRPcHRpb25zLmd1dHRlcldpZHRoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbHVtbi5zdHlsZS5ib3JkZXJSaWdodCA9IGAxcHggc29saWQgJHt0aGlzLmdyaWRPcHRpb25zLmdyaWRDb2xvcn1gO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdyaWQuc3R5bGUuYm9yZGVyUmlnaHQgPSBgMXB4IHNvbGlkICR7dGhpcy5ncmlkT3B0aW9ucy5ncmlkQ29sb3J9YDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuZ3JpZE9wdGlvbnMuZ3V0dGVyRml4ZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBjb2x1bW4uc3R5bGUubWFyZ2luUmlnaHQgPSBgJHt0aGlzLmdyaWRPcHRpb25zLmd1dHRlcldpZHRofXB4YDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29sdW1uLnN0eWxlLm1hcmdpblJpZ2h0ID0gdGhpcy5ndXR0ZXJXaWR0aFBlcmNlbnRhZ2U7XG4gICAgICAgICAgICAgICAgY29sdW1uLnN0eWxlLndpZHRoID0gdGhpcy5jb2x1bW5XaWR0aFBlcmNlbnRhZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmdyaWQubGFzdENoaWxkLnN0eWxlLm1hcmdpblJpZ2h0ID0gMDtcbiAgICB9XG5cbiAgICBrZXlib2FyZFNob3J0Y3V0KCkge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgKGV2KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXYua2V5Q29kZSA9PT0gNzEgJiYgZXYuYWx0S2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ3JpZC5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyaWQuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JpZC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCIvKipcbiAqIE1BSU4gSlMgRklMRVxuICovXG5cbi8qKlxuICogSGVscGVyc1xuICogSW1wb3J0cyBvZiBoZWxwZXIgZnVuY3Rpb25zIGFyZSBzdHJpcHBlZCBvdXQgb2YgYnVuZGxlXG4gKiBJbmNsdWRlIHRoZW0gd2l0aGluIFwic3RhcnQtc3RyaXAtY29kZVwiIGFuZCBcImVuZC1zdHJpcC1jb2RlXCIgY29tbWVudHNcbiAqL1xuLyogc3RhcnQtc3RyaXAtY29kZSAqL1xuaW1wb3J0IEdyaWRIZWxwZXIgZnJvbSBcIi4vaGVscGVycy9HcmlkSGVscGVyXCI7XG4vKiBlbmQtc3RyaXAtY29kZSAqL1xuLyoqXG4gKiBDb21wb25lbnRzXG4gKi9cbmltcG9ydCBOYXZpZ2F0aW9uQ29udHJvbGxlciBmcm9tIFwiLi9jb21wb25lbnRzL05hdmlnYXRpb25Db250cm9sbGVyXCI7XG5pbXBvcnQgR0xURk1vZGVsQ29udHJvbGxlciBmcm9tIFwiLi9jb21wb25lbnRzL0dMVEZNb2RlbENvbnRyb2xsZXJcIjtcbmltcG9ydCBHTFRGTW9kZWxDb250cm9sbGVyU2hhZGVyIGZyb20gXCIuL2NvbXBvbmVudHMvR0xURk1vZGVsQ29udHJvbGxlclNoYWRlclwiO1xuaW1wb3J0IEdMVEZNb2RlbENvbnRyb2xsZXJFbnZpcm9ubWVudCBmcm9tIFwiLi9jb21wb25lbnRzL0dMVEZNb2RlbENvbnRyb2xsZXJFbnZpcm9ubWVudFwiO1xuaW1wb3J0IFNvZmFNb2RlbENvbnRyb2xsZXIgZnJvbSBcIi4vY29tcG9uZW50cy9Tb2ZhTW9kZWxDb250cm9sbGVyXCI7XG5cbi8qKlxuICogQ2hlY2sgaWYgZG9jdW1lbnQgaXMgcmVhZHkgY3Jvc3MtYnJvd3NlclxuICogQHBhcmFtIGNhbGxiYWNrXG4gKi9cbmNvbnN0IHJlYWR5ID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEb2N1bWVudCBpcyBhbHJlYWR5IHJlYWR5LCBjYWxsIHRoZSBjYWxsYmFjayBkaXJlY3RseVxuICAgICAgICAgKi9cbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFsbCBtb2Rlcm4gYnJvd3NlcnMgdG8gcmVnaXN0ZXIgRE9NQ29udGVudExvYWRlZFxuICAgICAgICAgKi9cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPbGQgSUUgYnJvd3NlcnNcbiAgICAgICAgICovXG4gICAgICAgIGRvY3VtZW50LmF0dGFjaEV2ZW50KFwib25yZWFkeXN0YXRlY2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHJlYWR5IGNhbGxiYWNrXG4gKi9cbnJlYWR5KCgpID0+IHtcbiAgICAvKipcbiAgICAgKiBIRUxQRVJTIElOSVRcbiAgICAgKiBPbmx5IGluaXQgaGVscGVycyBpZiB0aGV5IGV4aXN0XG4gICAgICogV2lsbCBiZSB1bmRlZmluZWQgb24gcHJvZHVjdGlvbiBiZWNhdXNlIG9mIGltcG9ydCBzdHJpcHBpbmdcbiAgICAgKi9cbiAgICBpZiAodHlwZW9mIEdyaWRIZWxwZXIgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNvbnN0IGdyaWQgPSBuZXcgR3JpZEhlbHBlcigpO1xuICAgICAgICBncmlkLmluaXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDUkVESVRTIElOSVRcbiAgICAgKi9cbiAgICBjb25zdCBjcmVkaXRzID0gW1xuICAgICAgICBcImJhY2tncm91bmQtY29sb3I6ICMwMDAwMDBcIixcbiAgICAgICAgXCJjb2xvcjogd2hpdGVcIixcbiAgICAgICAgXCJkaXNwbGF5OiBibG9ja1wiLFxuICAgICAgICBcImxpbmUtaGVpZ2h0OiAyNHB4XCIsXG4gICAgICAgIFwidGV4dC1hbGlnbjogY2VudGVyXCIsXG4gICAgICAgIFwiYm9yZGVyOiAxcHggc29saWQgI2ZmZmZmZlwiLFxuICAgICAgICBcImZvbnQtd2VpZ2h0OiBib2xkXCIsXG4gICAgXS5qb2luKFwiO1wiKTtcbiAgICBjb25zb2xlLmluZm8oXCJkZXYgYnk6ICVjIEJvcm5maWdodCBcIiwgY3JlZGl0cyk7XG5cbiAgICAvKipcbiAgICAgKiBDT01QT05FTlRTIElOSVRcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIE5hdmlnYXRpb25cbiAgICAgKiBAdHlwZSB7TmF2aWdhdGlvbkNvbnRyb2xsZXJ9XG4gICAgICovXG4gICAgY29uc3QgbmF2aWdhdGlvbiA9IG5ldyBOYXZpZ2F0aW9uQ29udHJvbGxlcigpO1xuICAgIG5hdmlnYXRpb24uaW5pdCgpO1xuXG4gICAgY29uc3QgZ2x0Zk1vZGVsQ29udHJvbGxlciA9IG5ldyBHTFRGTW9kZWxDb250cm9sbGVyKCk7XG4gICAgZ2x0Zk1vZGVsQ29udHJvbGxlci5pbml0KCk7XG5cbiAgICBjb25zdCBnTFRGTW9kZWxDb250cm9sbGVyU2hhZGVyID0gbmV3IEdMVEZNb2RlbENvbnRyb2xsZXJTaGFkZXIoKTtcbiAgICBnTFRGTW9kZWxDb250cm9sbGVyU2hhZGVyLmluaXQoKTtcblxuICAgIGNvbnN0IGdMVEZNb2RlbENvbnRyb2xsZXJFbnZpcm9ubWVudCA9IG5ldyBHTFRGTW9kZWxDb250cm9sbGVyRW52aXJvbm1lbnQoKTtcbiAgICBnTFRGTW9kZWxDb250cm9sbGVyRW52aXJvbm1lbnQuaW5pdCgpO1xuXG4gICAgY29uc3Qgc29mYU1vZGVsQ29udHJvbGxlciA9IG5ldyBTb2ZhTW9kZWxDb250cm9sbGVyKCk7XG4gICAgc29mYU1vZGVsQ29udHJvbGxlci5pbml0KCk7XG59KTtcbiJdfQ=="}